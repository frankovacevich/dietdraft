{"ast":null,"code":"import _defineProperty from \"/home/x/workspace/01-diet-draft/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\"\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  constructor() {\n    _defineProperty(this, \"allFoods\", void 0);\n    _defineProperty(this, \"targetProtein\", void 0);\n    _defineProperty(this, \"targetFat\", void 0);\n    _defineProperty(this, \"targetCarbs\", void 0);\n    _defineProperty(this, \"calculationMethod\", void 0);\n    _defineProperty(this, \"calculationError\", void 0);\n    //\n    _defineProperty(this, \"POPULATION\", 100);\n    _defineProperty(this, \"SURVIVAL_RATE\", 0.1);\n    _defineProperty(this, \"MAX_ITERATIONS\", 10);\n  }\n  get targetCalories() {\n    return this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n  }\n  get foodsPerMeal() {\n    const foodsPerMeal = [];\n    const meals = [\"b\", \"s\", \"l\", \"d\"];\n    for (const meal of meals) {\n      foodsPerMeal.push(this.allFoods.filter(food => food[meal]));\n    }\n    return foodsPerMeal;\n  }\n  calculateError(plan) {\n    const total = {\n      protein: 0,\n      fat: 0,\n      carbs: 0\n    };\n    for (const food of plan.flat()) {\n      total.protein += food.protein * (food.amount || 0);\n      total.fat += food.fat * (food.amount || 0);\n      total.carbs += food.carbs * (food.amount || 0);\n    }\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n  createRandomPopulation() {\n    // Get foods per meal\n\n    // Build random plans\n    const plans = [];\n    const foodCounts = [1, 2, 3, 4, 5];\n    for (let i = 0; i < this.POPULATION; i++) {\n      const plan = [];\n      for (let m = 0; m < meals.length; m++) {\n        const foodCount = 1 + Math.floor(Math.random() * foodCounts.length);\n        const foods = getRandomSubsample(foodsPerMeal[m], foodCount);\n        plan.push(foods.map(food => ({\n          ...food\n        })));\n      }\n      plans.push(plan);\n    }\n    return plans;\n  }\n  extinctionAndCrossover(plans) {\n    // Order plans by error\n    plans = plans.sort((a, b) => this.calculateError(b) - this.calculateError(a));\n\n    // Extintion: remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.ceil(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Crossover\n    const newPlans = [];\n    newPlans.push(...plans);\n    return newPlans;\n  }\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n      plans = this.extinctionAndCrossover(plans);\n    }\n    return plans;\n  }\n  calculateDays(days) {\n    console.log(days);\n  }\n}\n\n/*\n * Helper function\n */\n\nfunction getRandomSubsample(originalList, sampleSize) {\n  if (sampleSize <= 0 || sampleSize > originalList.length) {\n    console.error(\"Invalid sample size\");\n    return [];\n  }\n\n  // Shuffle the original list using Fisher-Yates algorithm\n  const shuffledList = [...originalList];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n\n  // Take the first 'sampleSize' elements from the shuffled list\n  const subsampledList = shuffledList.slice(0, sampleSize);\n  return subsampledList;\n}","map":{"version":3,"names":["CalculationMethods","all","protein","fat","carbs","calories","Calculator","constructor","_defineProperty","targetCalories","targetProtein","targetCarbs","targetFat","foodsPerMeal","meals","meal","push","allFoods","filter","food","calculateError","plan","total","flat","amount","calculationMethod","e1","e2","e3","createRandomPopulation","plans","foodCounts","i","POPULATION","m","length","foodCount","Math","floor","random","foods","getRandomSubsample","map","extinctionAndCrossover","sort","a","b","survivalRate","survivorsCount","ceil","slice","newPlans","calculateDay","MAX_ITERATIONS","calculateDays","days","console","log","originalList","sampleSize","error","shuffledList","j","subsampledList"],"sources":["/home/x/workspace/01-diet-draft/client/src/calculator.js"],"sourcesContent":["/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\",\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  allFoods;\n  targetProtein;\n  targetFat;\n  targetCarbs;\n  calculationMethod;\n  calculationError;\n\n  //\n  POPULATION = 100;\n  SURVIVAL_RATE = 0.1;\n  MAX_ITERATIONS = 10;\n\n  constructor() {}\n\n  get targetCalories() {\n    return this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n  }\n\n  get foodsPerMeal() {\n    const foodsPerMeal = [];\n    const meals = [\"b\", \"s\", \"l\", \"d\"];\n    for (const meal of meals) {\n      foodsPerMeal.push(this.allFoods.filter((food) => food[meal]));\n    }\n    return foodsPerMeal;\n  }\n\n  calculateError(plan) {\n    const total = { protein: 0, fat: 0, carbs: 0 };\n    for (const food of plan.flat()) {\n      total.protein += food.protein * (food.amount || 0);\n      total.fat += food.fat * (food.amount || 0);\n      total.carbs += food.carbs * (food.amount || 0);\n    }\n\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n\n  createRandomPopulation() {\n    // Get foods per meal\n\n    // Build random plans\n    const plans = [];\n    const foodCounts = [1, 2, 3, 4, 5];\n    for (let i = 0; i < this.POPULATION; i++) {\n      const plan = [];\n      for (let m = 0; m < meals.length; m++) {\n        const foodCount = 1 + Math.floor(Math.random() * foodCounts.length);\n        const foods = getRandomSubsample(foodsPerMeal[m], foodCount);\n        plan.push(foods.map((food) => ({ ...food })));\n      }\n      plans.push(plan);\n    }\n    return plans;\n  }\n\n  extinctionAndCrossover(plans) {\n    // Order plans by error\n    plans = plans.sort(\n      (a, b) => this.calculateError(b) - this.calculateError(a)\n    );\n\n    // Extintion: remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.ceil(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Crossover\n    const newPlans = [];\n\n    newPlans.push(...plans);\n\n    return newPlans;\n  }\n\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n      plans = this.extinctionAndCrossover(plans);\n    }\n    return plans;\n  }\n\n  calculateDays(days) {\n    console.log(days);\n  }\n}\n\n/*\n * Helper function\n */\n\nfunction getRandomSubsample(originalList, sampleSize) {\n  if (sampleSize <= 0 || sampleSize > originalList.length) {\n    console.error(\"Invalid sample size\");\n    return [];\n  }\n\n  // Shuffle the original list using Fisher-Yates algorithm\n  const shuffledList = [...originalList];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n\n  // Take the first 'sampleSize' elements from the shuffled list\n  const subsampledList = shuffledList.slice(0, sampleSize);\n\n  return subsampledList;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}