{"ast":null,"code":"import _defineProperty from \"/home/x/workspace/01-diet-draft/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\"\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  constructor() {\n    _defineProperty(this, \"allFoods\", void 0);\n    _defineProperty(this, \"targetProtein\", void 0);\n    _defineProperty(this, \"targetFat\", void 0);\n    _defineProperty(this, \"targetCarbs\", void 0);\n    _defineProperty(this, \"calculationMethod\", void 0);\n    _defineProperty(this, \"calculationError\", void 0);\n    //\n    _defineProperty(this, \"POPULATION_SIZE\", 100);\n    _defineProperty(this, \"SURVIVAL_RATE\", 0.1);\n    _defineProperty(this, \"MAX_ITERATIONS\", 10);\n  }\n  get targetCalories() {\n    return this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n  }\n  get meals() {\n    return [\"b\", \"s\", \"l\", \"d\"];\n  }\n  get foodsPerMeal() {\n    if (this._foodsPerMeal) {\n      return this._foodsPerMeal;\n    }\n    const foodsPerMeal = [];\n    for (const meal of this.meals) {\n      foodsPerMeal.push(this.allFoods.filter(food => food[meal]));\n    }\n    this._foodsPerMeal = foodsPerMeal;\n    return foodsPerMeal;\n  }\n  calculateError(plan) {\n    const total = {\n      protein: 0,\n      fat: 0,\n      carbs: 0\n    };\n    for (const meal of plan) {\n      for (const food of meal) {\n        total.protein += food.protein * (food.amount || 0);\n        total.fat += food.fat * (food.amount || 0);\n        total.carbs += food.carbs * (food.amount || 0);\n      }\n    }\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n  sortPlans(plans) {\n    return plans.sort((a, b) => this.calculateError(a) - this.calculateError(b));\n  }\n  createRandomMeal(mealIdx) {\n    const foodCounts = [1, 2, 3, 4, 5];\n    const foodCount = 1 + Math.floor(Math.random() * foodCounts.length);\n    const foods = getRandomSubsample(this.foodsPerMeal[mealIdx], foodCount);\n    return foods.map(food => ({\n      ...food,\n      amount: 1\n    }));\n  }\n  createRandomPopulation() {\n    const plans = [];\n    for (let i = 0; i < this.POPULATION_SIZE; i++) {\n      const plan = [];\n      for (let m = 0; m < this.meals.length; m++) {\n        plan.push(this.createRandomMeal(m));\n      }\n      plans.push(plan);\n    }\n    return plans;\n  }\n  extinctionAndEvolution(plans) {\n    plans = this.sortPlans(plans);\n\n    // Extinction: remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.ceil(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Evolution: randomly mutate some meals\n    const newPlans = [];\n    newPlans.push(...plans);\n    while (newPlans.length < this.POPULATION_SIZE) {\n      const planIdx = Math.floor(Math.random() * plans.length);\n      const mealIdx = Math.floor(Math.random() * this.meals.length);\n      const newPlan = plans[planIdx];\n      newPlan[mealIdx] = this.createRandomMeal(mealIdx);\n      newPlans.push(newPlan);\n    }\n    return newPlans;\n  }\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    // for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n    //   plans = this.extinctionAndEvolution(plans);\n    // }\n\n    plans = this.sortPlans(plans);\n    console.log(this.calculateError(plans[0]));\n    console.log(this.calculateError(plans[99]));\n    return plans[0];\n  }\n  calculateDays(days) {\n    console.log(days);\n  }\n}\n\n/*\n * Helper function\n */\n\nfunction getRandomSubsample(originalList, sampleSize) {\n  if (sampleSize <= 0 || sampleSize > originalList.length) {\n    console.error(\"Invalid sample size\");\n    return [];\n  }\n\n  // Shuffle the original list using Fisher-Yates algorithm\n  const shuffledList = [...originalList];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n\n  // Take the first 'sampleSize' elements from the shuffled list\n  const subsampledList = shuffledList.slice(0, sampleSize);\n  return subsampledList;\n}","map":{"version":3,"names":["CalculationMethods","all","protein","fat","carbs","calories","Calculator","constructor","_defineProperty","targetCalories","targetProtein","targetCarbs","targetFat","meals","foodsPerMeal","_foodsPerMeal","meal","push","allFoods","filter","food","calculateError","plan","total","amount","calculationMethod","e1","e2","e3","sortPlans","plans","sort","a","b","createRandomMeal","mealIdx","foodCounts","foodCount","Math","floor","random","length","foods","getRandomSubsample","map","createRandomPopulation","i","POPULATION_SIZE","m","extinctionAndEvolution","survivalRate","survivorsCount","ceil","slice","newPlans","planIdx","newPlan","calculateDay","console","log","calculateDays","days","originalList","sampleSize","error","shuffledList","j","subsampledList"],"sources":["/home/x/workspace/01-diet-draft/client/src/calculator.js"],"sourcesContent":["/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\",\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  allFoods;\n  targetProtein;\n  targetFat;\n  targetCarbs;\n  calculationMethod;\n  calculationError;\n\n  //\n  POPULATION_SIZE = 100;\n  SURVIVAL_RATE = 0.1;\n  MAX_ITERATIONS = 10;\n\n  constructor() {}\n\n  get targetCalories() {\n    return this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n  }\n\n  get meals() {\n    return [\"b\", \"s\", \"l\", \"d\"];\n  }\n\n  get foodsPerMeal() {\n    if (this._foodsPerMeal) {\n      return this._foodsPerMeal;\n    }\n\n    const foodsPerMeal = [];\n    for (const meal of this.meals) {\n      foodsPerMeal.push(this.allFoods.filter((food) => food[meal]));\n    }\n    this._foodsPerMeal = foodsPerMeal;\n    return foodsPerMeal;\n  }\n\n  calculateError(plan) {\n    const total = { protein: 0, fat: 0, carbs: 0 };\n    for (const meal of plan) {\n      for (const food of meal) {\n        total.protein += food.protein * (food.amount || 0);\n        total.fat += food.fat * (food.amount || 0);\n        total.carbs += food.carbs * (food.amount || 0);\n      }\n    }\n\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n\n  sortPlans(plans) {\n    return plans.sort(\n      (a, b) => this.calculateError(a) - this.calculateError(b)\n    );\n  }\n\n  createRandomMeal(mealIdx) {\n    const foodCounts = [1, 2, 3, 4, 5];\n    const foodCount = 1 + Math.floor(Math.random() * foodCounts.length);\n    const foods = getRandomSubsample(this.foodsPerMeal[mealIdx], foodCount);\n    return foods.map((food) => ({ ...food, amount: 1 }));\n  }\n\n  createRandomPopulation() {\n    const plans = [];\n    for (let i = 0; i < this.POPULATION_SIZE; i++) {\n      const plan = [];\n      for (let m = 0; m < this.meals.length; m++) {\n        plan.push(this.createRandomMeal(m));\n      }\n      plans.push(plan);\n    }\n    return plans;\n  }\n\n  extinctionAndEvolution(plans) {\n    plans = this.sortPlans(plans);\n\n    // Extinction: remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.ceil(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Evolution: randomly mutate some meals\n    const newPlans = [];\n    newPlans.push(...plans);\n    while (newPlans.length < this.POPULATION_SIZE) {\n      const planIdx = Math.floor(Math.random() * plans.length);\n      const mealIdx = Math.floor(Math.random() * this.meals.length);\n      const newPlan = plans[planIdx];\n      newPlan[mealIdx] = this.createRandomMeal(mealIdx);\n      newPlans.push(newPlan);\n    }\n\n    return newPlans;\n  }\n\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    // for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n    //   plans = this.extinctionAndEvolution(plans);\n    // }\n\n    plans = this.sortPlans(plans);\n    console.log(this.calculateError(plans[0]));\n    console.log(this.calculateError(plans[99]));\n\n    return plans[0];\n  }\n\n  calculateDays(days) {\n    console.log(days);\n  }\n}\n\n/*\n * Helper function\n */\n\nfunction getRandomSubsample(originalList, sampleSize) {\n  if (sampleSize <= 0 || sampleSize > originalList.length) {\n    console.error(\"Invalid sample size\");\n    return [];\n  }\n\n  // Shuffle the original list using Fisher-Yates algorithm\n  const shuffledList = [...originalList];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n\n  // Take the first 'sampleSize' elements from the shuffled list\n  const subsampledList = shuffledList.slice(0, sampleSize);\n\n  return subsampledList;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}