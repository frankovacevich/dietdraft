{"ast":null,"code":"import _defineProperty from \"/home/x/workspace/diet-draft/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { defineStore } from \"pinia\";\nimport { Calculator, CalculationMethods, getRandomSubsample } from \"./calculator\";\n\n/*\nClasses\n*/\nexport class Food {\n  constructor() {\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"icon\", void 0);\n    _defineProperty(this, \"description\", void 0);\n    _defineProperty(this, \"protein\", void 0);\n    _defineProperty(this, \"fat\", void 0);\n    _defineProperty(this, \"carbs\", void 0);\n    _defineProperty(this, \"category\", void 0);\n  }\n  get calories() {\n    return this.protein * 4 + this.fat * 9 + this.carbs * 4;\n  }\n}\nexport class PlanInfo {\n  constructor() {\n    _defineProperty(this, \"created\", new Date().getTime());\n    _defineProperty(this, \"protein\", 110);\n    _defineProperty(this, \"fat\", 105);\n    _defineProperty(this, \"carbs\", 100);\n    _defineProperty(this, \"days\", 1);\n    _defineProperty(this, \"calculationMethod\", CalculationMethods.all);\n  }\n  get calories() {\n    return this.protein * 4 + this.fat * 9 + this.carbs * 4;\n  }\n  get currentDay() {\n    const now = new Date().getTime();\n    return Math.floor((now - this.created) / (24 * 60 * 60 * 1000));\n  }\n  get percentages() {\n    return {\n      protein: Math.round(100 * this.protein * 4 / this.calories),\n      fat: Math.round(100 * this.fat * 9 / this.calories),\n      carbs: Math.round(100 * this.carbs * 4 / this.calories),\n      calories: 100\n    };\n  }\n  toJson() {\n    return JSON.stringify({\n      created: this.created,\n      protein: this.protein,\n      fat: this.fat,\n      carbs: this.carbs,\n      days: this.days,\n      calculationMethod: this.calculationMethod\n    });\n  }\n  static fromJson(json) {\n    const obj = JSON.parse(json);\n    const planInfo = new PlanInfo();\n    planInfo.created = obj.created;\n    planInfo.protein = obj.protein;\n    planInfo.fat = obj.fat;\n    planInfo.carbs = obj.carbs;\n    planInfo.days = obj.days;\n    planInfo.calculationMethod = obj.calculationMethod;\n    return planInfo;\n  }\n}\nexport class AddFoodModal {\n  constructor() {\n    _defineProperty(this, \"visible\", false);\n    _defineProperty(this, \"meal\", 0);\n    _defineProperty(this, \"foods\", []);\n    _defineProperty(this, \"searchText\", \"\");\n  }\n  get mealName() {\n    return Meals[this.meal];\n  }\n  get searchInput() {\n    return document.getElementById(\"searchInput\");\n  }\n  getSearchedFoods() {\n    if (this.searchText === \"\") {\n      return this.foods;\n    }\n    return this.foods.filter(food => food.name.toLowerCase().includes(this.searchText.toLowerCase()));\n  }\n  getCategories() {\n    const foods = this.getSearchedFoods();\n    return new Set(foods.map(food => food.category));\n  }\n  getSelectedFoods() {\n    const foods = this.foods.filter(food => food.selected);\n    foods.forEach(food => {\n      food.selected = false;\n      food.amount = 1;\n    });\n    return foods;\n  }\n  getFoodsForCategory(category) {\n    const foods = this.getSearchedFoods();\n    return foods.filter(food => food.category === category);\n  }\n  open(meal, foods) {\n    this.meal = meal;\n    this.visible = true;\n    this.foods = foods.map(food => ({\n      ...food\n    }));\n    this.searchInput.focus();\n  }\n  close() {\n    this.visible = false;\n    this.searchText = \"\";\n    return this.getSelectedFoods();\n  }\n  clearSearch() {\n    this.searchText = \"\";\n    this.searchInput.focus();\n  }\n}\nexport class PlanInfoInput {\n  constructor(planInfo) {\n    this.protein = planInfo.protein;\n    this.fat = planInfo.fat;\n    this.carbs = planInfo.carbs;\n    this.days = planInfo.days;\n    this.calculationMethod = planInfo.calculationMethod;\n  }\n  get calories() {\n    return this.protein * 4 + this.fat * 9 + this.carbs * 4;\n  }\n  get percentages() {\n    return {\n      protein: Math.round(100 * this.protein * 4 / this.calories),\n      fat: Math.round(100 * this.fat * 9 / this.calories),\n      carbs: Math.round(100 * this.carbs * 4 / this.calories),\n      calories: 100\n    };\n  }\n}\nexport const Meals = [\"breakfast\", \"snack\", \"lunch\", \"dinner\"];\n\n/*\nStore\n*/\nexport const mainStore = defineStore(\"mainStore\", {\n  state: () => {\n    return {\n      allFoods: [],\n      planFoods: [],\n      planInfo: new PlanInfo(),\n      day: 0,\n      editMode: false,\n      selectedQuantity: 0,\n      //\n      addFoodModal: new AddFoodModal(),\n      //\n      planInfoInput: new PlanInfoInput(new PlanInfo()),\n      calculating: false\n    };\n  },\n  getters: {\n    meals() {\n      return Meals;\n    },\n    todaysFoods() {\n      return this.planFoods[this.day];\n    },\n    todayIsFirstDay() {\n      return this.day === 0;\n    },\n    todayIsLastDay() {\n      return this.day === this.planInfo.days - 1;\n    },\n    todaysQuantities() {\n      const total = {\n        protein: 0,\n        fat: 0,\n        carbs: 0,\n        calories: 0\n      };\n      this.planFoods[this.day].flat().forEach(food => {\n        total.protein += food.protein * (food.amount || 0);\n        total.fat += food.fat * (food.amount || 0);\n        total.carbs += food.carbs * (food.amount || 0);\n      });\n      total.calories = 4 * total.protein + 9 * total.fat + 4 * total.carbs;\n      return total;\n    },\n    planFoodsAverages() {\n      const total = {\n        protein: 0,\n        fat: 0,\n        carbs: 0,\n        calories: 0\n      };\n      for (let day = 0; day < this.planFoods.length; day++) {\n        for (const meal of this.planFoods[day]) {\n          for (const food of meal) {\n            total.protein += food.protein * (food.amount || 0);\n            total.fat += food.fat * (food.amount || 0);\n            total.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n      total.calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      total.calories = total.calories / this.planInfo.days;\n      total.protein = total.protein / this.planInfo.days;\n      total.fat = total.fat / this.planInfo.days;\n      total.carbs = total.carbs / this.planInfo.days;\n      return total;\n    },\n    planFoodsAveragesPercentages() {\n      const avg = {\n        ...this.planFoodsAverages\n      };\n      avg.protein = Math.round(100 * avg.protein * 4 / avg.calories);\n      avg.fat = Math.round(100 * avg.fat * 9 / avg.calories);\n      avg.carbs = Math.round(100 * avg.carbs * 4 / avg.calories);\n      avg.calories = 100;\n      return avg;\n    },\n    planInfoCalories() {\n      return this.planInfo.protein * 4 + this.planInfo.fat * 9 + this.planInfo.carbs * 4;\n    },\n    shoppingList() {\n      const foods = this.planFoods.flat(2);\n      const foodMap = new Map();\n      foods.forEach(food => {\n        if (foodMap.has(food.name)) {\n          const newAmount = food.amount + foodMap.get(food.name).amount;\n          foodMap.set(food.name, {\n            ...food,\n            amount: newAmount\n          });\n        } else {\n          foodMap.set(food.name, {\n            ...food\n          });\n        }\n      });\n      return Array.from(foodMap.values()).sort((a, b) => b.amount - a.amount);\n    }\n  },\n  actions: {\n    save() {\n      localStorage.setItem(\"planFoods\", JSON.stringify(this.planFoods));\n      if (this.planInfo !== null) {\n        localStorage.setItem(\"planInfo\", this.planInfo.toJson());\n      }\n    },\n    load() {\n      const obj = localStorage.getItem(\"planInfo\");\n      if (obj) {\n        this.planInfo = PlanInfo.fromJson(obj);\n      } else {\n        this.planInfo = new PlanInfo();\n      }\n      this.planInfoInput = new PlanInfoInput(this.planInfo);\n      this.day = this.planInfo.currentDay;\n      const planFoods = localStorage.getItem(\"planFoods\");\n      if (planFoods) {\n        this.planFoods = JSON.parse(planFoods);\n        if (planFoods.length === this.planInfo.days) {\n          this.planFoods = undefined;\n        }\n      }\n      if (!planFoods) {\n        this.planFoods = [[]];\n        for (let i = 0; i < this.planInfo.days; i++) {\n          for (let m = 0; m < this.meals.length; m++) {\n            this.planFoods[0].push([]);\n          }\n        }\n      }\n    },\n    async fetchData() {\n      const response = await fetch(\"/data.json\");\n      this.allFoods = await response.json();\n      this.allFoods.forEach(food => {\n        food.selected = false;\n      });\n    },\n    goToPreviousDay() {\n      if (!this.todayIsFirstDay) {\n        this.day--;\n      }\n    },\n    goToNextDay() {\n      if (!this.todayIsLastDay) {\n        this.day++;\n      }\n    },\n    toggleEditMode() {\n      this.editMode = !this.editMode;\n    },\n    newPlan() {},\n    recalculateToday() {\n      // Calculate targets based on what's already been eaten\n      const totalEaten = {\n        protein: 0,\n        fat: 0,\n        carbs: 0\n      };\n      this.planFoods[this.day].flat().forEach(food => {\n        if (food.selected) {\n          totalEaten.protein += food.protein * (food.amount || 0);\n          totalEaten.fat += food.fat * (food.amount || 0);\n          totalEaten.carbs += food.carbs * (food.amount || 0);\n        }\n      });\n      const calculator = new Calculator(this.allFoods, this.planInfo.calculationMethod, this.planInfo.protein - totalEaten.protein, this.planInfo.fat - totalEaten.fat, this.planInfo.carbs - totalEaten.carbs);\n      const newPlan = calculator.calculateDay();\n      for (let m = 0; m < newPlan.length; m++) {\n        const eatenFoods = this.todaysFoods[m].filter(food => food.selected);\n        newPlan[m] = [...eatenFoods, ...newPlan[m]];\n      }\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n    generateNewPlan() {\n      this.calculating = true;\n      this.planInfo.protein = this.planInfoInput.protein;\n      this.planInfo.fat = this.planInfoInput.fat;\n      this.planInfo.carbs = this.planInfoInput.carbs;\n      this.planInfo.days = this.planInfoInput.days;\n      this.planInfo.calculationMethod = this.planInfoInput.calculationMethod;\n      const r = Math.min(1, 0.3 + 0.024 * (this.planInfo.days - 1));\n      const calculator = new Calculator(getRandomSubsample(this.allFoods, Math.round(this.allFoods.length * r)), this.planInfo.calculationMethod, this.planInfo.protein, this.planInfo.fat, this.planInfo.carbs);\n      this.planFoods = calculator.calculateDays(this.planInfo.days);\n      this.planInfo.created = new Date().getTime();\n      this.day = 0;\n      this.save();\n      this.calculating = false;\n    },\n    clearToday() {\n      const newPlan = [];\n      for (const meal of this.planFoods[this.day]) {\n        newPlan.push(meal.filter(food => food.selected));\n      }\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n    changeFoodEaten(food) {\n      food.selected = !food.selected;\n      this.save();\n    },\n    changeFoodAmount(food) {\n      const nextAmountMap = {\n        0.25: 0.5,\n        0.5: 0.75,\n        0.75: 1,\n        1: 1.25,\n        1.25: 1.5,\n        1.5: 0.25\n      };\n      food.amount = nextAmountMap[food.amount] || 1;\n    },\n    foodDragStart() {},\n    foodDragEnd() {\n      this.save();\n    },\n    removeFood(meal, index) {\n      this.planFoods[this.day][meal].splice(index, 1);\n    },\n    addFoodFromModal() {\n      if (!this.addFoodModal.visible) {\n        return;\n      }\n      const meal = this.addFoodModal.meal;\n      const foods = this.addFoodModal.close();\n      this.planFoods[this.day][meal].push(...foods);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","Calculator","CalculationMethods","getRandomSubsample","Food","constructor","_defineProperty","calories","protein","fat","carbs","PlanInfo","Date","getTime","all","currentDay","now","Math","floor","created","percentages","round","toJson","JSON","stringify","days","calculationMethod","fromJson","json","obj","parse","planInfo","AddFoodModal","mealName","Meals","meal","searchInput","document","getElementById","getSearchedFoods","searchText","foods","filter","food","name","toLowerCase","includes","getCategories","Set","map","category","getSelectedFoods","selected","forEach","amount","getFoodsForCategory","open","visible","focus","close","clearSearch","PlanInfoInput","mainStore","state","allFoods","planFoods","day","editMode","selectedQuantity","addFoodModal","planInfoInput","calculating","getters","meals","todaysFoods","todayIsFirstDay","todayIsLastDay","todaysQuantities","total","flat","planFoodsAverages","length","planFoodsAveragesPercentages","avg","planInfoCalories","shoppingList","foodMap","Map","has","newAmount","get","set","Array","from","values","sort","a","b","actions","save","localStorage","setItem","load","getItem","undefined","i","m","push","fetchData","response","fetch","goToPreviousDay","goToNextDay","toggleEditMode","newPlan","recalculateToday","totalEaten","calculator","calculateDay","eatenFoods","generateNewPlan","r","min","calculateDays","clearToday","changeFoodEaten","changeFoodAmount","nextAmountMap","foodDragStart","foodDragEnd","removeFood","index","splice","addFoodFromModal"],"sources":["/home/x/workspace/diet-draft/client/src/store.js"],"sourcesContent":["import { defineStore } from \"pinia\";\nimport {\n  Calculator,\n  CalculationMethods,\n  getRandomSubsample,\n} from \"./calculator\";\n\n/*\nClasses\n*/\nexport class Food {\n  id;\n  name;\n  icon;\n  description;\n  protein;\n  fat;\n  carbs;\n  category;\n\n  get calories() {\n    return this.protein * 4 + this.fat * 9 + this.carbs * 4;\n  }\n}\n\nexport class PlanInfo {\n  created = new Date().getTime();\n  protein = 110;\n  fat = 105;\n  carbs = 100;\n  days = 1;\n  calculationMethod = CalculationMethods.all;\n\n  get calories() {\n    return this.protein * 4 + this.fat * 9 + this.carbs * 4;\n  }\n\n  get currentDay() {\n    const now = new Date().getTime();\n    return Math.floor((now - this.created) / (24 * 60 * 60 * 1000));\n  }\n\n  get percentages() {\n    return {\n      protein: Math.round((100 * this.protein * 4) / this.calories),\n      fat: Math.round((100 * this.fat * 9) / this.calories),\n      carbs: Math.round((100 * this.carbs * 4) / this.calories),\n      calories: 100,\n    };\n  }\n\n  toJson() {\n    return JSON.stringify({\n      created: this.created,\n      protein: this.protein,\n      fat: this.fat,\n      carbs: this.carbs,\n      days: this.days,\n      calculationMethod: this.calculationMethod,\n    });\n  }\n\n  static fromJson(json) {\n    const obj = JSON.parse(json);\n    const planInfo = new PlanInfo();\n    planInfo.created = obj.created;\n    planInfo.protein = obj.protein;\n    planInfo.fat = obj.fat;\n    planInfo.carbs = obj.carbs;\n    planInfo.days = obj.days;\n    planInfo.calculationMethod = obj.calculationMethod;\n    return planInfo;\n  }\n}\n\nexport class AddFoodModal {\n  visible = false;\n  meal = 0;\n  foods = [];\n  searchText = \"\";\n\n  get mealName() {\n    return Meals[this.meal];\n  }\n\n  get searchInput() {\n    return document.getElementById(\"searchInput\");\n  }\n\n  getSearchedFoods() {\n    if (this.searchText === \"\") {\n      return this.foods;\n    }\n    return this.foods.filter((food) =>\n      food.name.toLowerCase().includes(this.searchText.toLowerCase())\n    );\n  }\n\n  getCategories() {\n    const foods = this.getSearchedFoods();\n    return new Set(foods.map((food) => food.category));\n  }\n\n  getSelectedFoods() {\n    const foods = this.foods.filter((food) => food.selected);\n    foods.forEach((food) => {\n      food.selected = false;\n      food.amount = 1;\n    });\n    return foods;\n  }\n\n  getFoodsForCategory(category) {\n    const foods = this.getSearchedFoods();\n    return foods.filter((food) => food.category === category);\n  }\n\n  open(meal, foods) {\n    this.meal = meal;\n    this.visible = true;\n    this.foods = foods.map((food) => ({ ...food }));\n    this.searchInput.focus();\n  }\n\n  close() {\n    this.visible = false;\n    this.searchText = \"\";\n    return this.getSelectedFoods();\n  }\n\n  clearSearch() {\n    this.searchText = \"\";\n    this.searchInput.focus();\n  }\n}\n\nexport class PlanInfoInput {\n  constructor(planInfo) {\n    this.protein = planInfo.protein;\n    this.fat = planInfo.fat;\n    this.carbs = planInfo.carbs;\n    this.days = planInfo.days;\n    this.calculationMethod = planInfo.calculationMethod;\n  }\n\n  get calories() {\n    return this.protein * 4 + this.fat * 9 + this.carbs * 4;\n  }\n\n  get percentages() {\n    return {\n      protein: Math.round((100 * this.protein * 4) / this.calories),\n      fat: Math.round((100 * this.fat * 9) / this.calories),\n      carbs: Math.round((100 * this.carbs * 4) / this.calories),\n      calories: 100,\n    };\n  }\n}\n\nexport const Meals = [\"breakfast\", \"snack\", \"lunch\", \"dinner\"];\n\n/*\nStore\n*/\nexport const mainStore = defineStore(\"mainStore\", {\n  state: () => {\n    return {\n      allFoods: [],\n      planFoods: [],\n      planInfo: new PlanInfo(),\n      day: 0,\n      editMode: false,\n      selectedQuantity: 0,\n      //\n      addFoodModal: new AddFoodModal(),\n      //\n      planInfoInput: new PlanInfoInput(new PlanInfo()),\n      calculating: false,\n    };\n  },\n\n  getters: {\n    meals() {\n      return Meals;\n    },\n\n    todaysFoods() {\n      return this.planFoods[this.day];\n    },\n\n    todayIsFirstDay() {\n      return this.day === 0;\n    },\n\n    todayIsLastDay() {\n      return this.day === this.planInfo.days - 1;\n    },\n\n    todaysQuantities() {\n      const total = { protein: 0, fat: 0, carbs: 0, calories: 0 };\n      this.planFoods[this.day].flat().forEach((food) => {\n        total.protein += food.protein * (food.amount || 0);\n        total.fat += food.fat * (food.amount || 0);\n        total.carbs += food.carbs * (food.amount || 0);\n      });\n      total.calories = 4 * total.protein + 9 * total.fat + 4 * total.carbs;\n      return total;\n    },\n\n    planFoodsAverages() {\n      const total = { protein: 0, fat: 0, carbs: 0, calories: 0 };\n      for (let day = 0; day < this.planFoods.length; day++) {\n        for (const meal of this.planFoods[day]) {\n          for (const food of meal) {\n            total.protein += food.protein * (food.amount || 0);\n            total.fat += food.fat * (food.amount || 0);\n            total.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n\n      total.calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      total.calories = total.calories / this.planInfo.days;\n\n      total.protein = total.protein / this.planInfo.days;\n      total.fat = total.fat / this.planInfo.days;\n      total.carbs = total.carbs / this.planInfo.days;\n\n      return total;\n    },\n\n    planFoodsAveragesPercentages() {\n      const avg = { ...this.planFoodsAverages };\n      avg.protein = Math.round((100 * avg.protein * 4) / avg.calories);\n      avg.fat = Math.round((100 * avg.fat * 9) / avg.calories);\n      avg.carbs = Math.round((100 * avg.carbs * 4) / avg.calories);\n      avg.calories = 100;\n      return avg;\n    },\n\n    planInfoCalories() {\n      return (\n        this.planInfo.protein * 4 +\n        this.planInfo.fat * 9 +\n        this.planInfo.carbs * 4\n      );\n    },\n\n    shoppingList() {\n      const foods = this.planFoods.flat(2);\n      const foodMap = new Map();\n\n      foods.forEach((food) => {\n        if (foodMap.has(food.name)) {\n          const newAmount = food.amount + foodMap.get(food.name).amount;\n          foodMap.set(food.name, { ...food, amount: newAmount });\n        } else {\n          foodMap.set(food.name, { ...food });\n        }\n      });\n\n      return Array.from(foodMap.values()).sort((a, b) => b.amount - a.amount);\n    },\n  },\n\n  actions: {\n    save() {\n      localStorage.setItem(\"planFoods\", JSON.stringify(this.planFoods));\n\n      if (this.planInfo !== null) {\n        localStorage.setItem(\"planInfo\", this.planInfo.toJson());\n      }\n    },\n\n    load() {\n      const obj = localStorage.getItem(\"planInfo\");\n      if (obj) {\n        this.planInfo = PlanInfo.fromJson(obj);\n      } else {\n        this.planInfo = new PlanInfo();\n      }\n      this.planInfoInput = new PlanInfoInput(this.planInfo);\n      this.day = this.planInfo.currentDay;\n\n      const planFoods = localStorage.getItem(\"planFoods\");\n      if (planFoods) {\n        this.planFoods = JSON.parse(planFoods);\n        if (planFoods.length === this.planInfo.days) {\n          this.planFoods = undefined;\n        }\n      }\n\n      if (!planFoods) {\n        this.planFoods = [[]];\n        for (let i = 0; i < this.planInfo.days; i++) {\n          for (let m = 0; m < this.meals.length; m++) {\n            this.planFoods[0].push([]);\n          }\n        }\n      }\n    },\n\n    async fetchData() {\n      const response = await fetch(\"/data.json\");\n      this.allFoods = await response.json();\n      this.allFoods.forEach((food) => {\n        food.selected = false;\n      });\n    },\n\n    goToPreviousDay() {\n      if (!this.todayIsFirstDay) {\n        this.day--;\n      }\n    },\n\n    goToNextDay() {\n      if (!this.todayIsLastDay) {\n        this.day++;\n      }\n    },\n\n    toggleEditMode() {\n      this.editMode = !this.editMode;\n    },\n\n    newPlan() {},\n\n    recalculateToday() {\n      // Calculate targets based on what's already been eaten\n      const totalEaten = { protein: 0, fat: 0, carbs: 0 };\n      this.planFoods[this.day].flat().forEach((food) => {\n        if (food.selected) {\n          totalEaten.protein += food.protein * (food.amount || 0);\n          totalEaten.fat += food.fat * (food.amount || 0);\n          totalEaten.carbs += food.carbs * (food.amount || 0);\n        }\n      });\n\n      const calculator = new Calculator(\n        this.allFoods,\n        this.planInfo.calculationMethod,\n        this.planInfo.protein - totalEaten.protein,\n        this.planInfo.fat - totalEaten.fat,\n        this.planInfo.carbs - totalEaten.carbs\n      );\n\n      const newPlan = calculator.calculateDay();\n      for (let m = 0; m < newPlan.length; m++) {\n        const eatenFoods = this.todaysFoods[m].filter((food) => food.selected);\n        newPlan[m] = [...eatenFoods, ...newPlan[m]];\n      }\n\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n\n    generateNewPlan() {\n      this.calculating = true;\n      this.planInfo.protein = this.planInfoInput.protein;\n      this.planInfo.fat = this.planInfoInput.fat;\n      this.planInfo.carbs = this.planInfoInput.carbs;\n      this.planInfo.days = this.planInfoInput.days;\n      this.planInfo.calculationMethod = this.planInfoInput.calculationMethod;\n\n      const r = Math.min(1, 0.3 + 0.024 * (this.planInfo.days - 1));\n      const calculator = new Calculator(\n        getRandomSubsample(this.allFoods, Math.round(this.allFoods.length * r)),\n        this.planInfo.calculationMethod,\n        this.planInfo.protein,\n        this.planInfo.fat,\n        this.planInfo.carbs\n      );\n\n      this.planFoods = calculator.calculateDays(this.planInfo.days);\n      this.planInfo.created = new Date().getTime();\n      this.day = 0;\n\n      this.save();\n      this.calculating = false;\n    },\n\n    clearToday() {\n      const newPlan = [];\n      for (const meal of this.planFoods[this.day]) {\n        newPlan.push(meal.filter((food) => food.selected));\n      }\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n\n    changeFoodEaten(food) {\n      food.selected = !food.selected;\n      this.save();\n    },\n\n    changeFoodAmount(food) {\n      const nextAmountMap = {\n        0.25: 0.5,\n        0.5: 0.75,\n        0.75: 1,\n        1: 1.25,\n        1.25: 1.5,\n        1.5: 0.25,\n      };\n      food.amount = nextAmountMap[food.amount] || 1;\n    },\n\n    foodDragStart() {},\n\n    foodDragEnd() {\n      this.save();\n    },\n\n    removeFood(meal, index) {\n      this.planFoods[this.day][meal].splice(index, 1);\n    },\n\n    addFoodFromModal() {\n      if (!this.addFoodModal.visible) {\n        return;\n      }\n      const meal = this.addFoodModal.meal;\n      const foods = this.addFoodModal.close();\n      this.planFoods[this.day][meal].push(...foods);\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}