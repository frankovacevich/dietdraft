{"ast":null,"code":"import _defineProperty from \"/home/x/workspace/01-diet-draft/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\"\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  constructor(allFoods, calculationMethod, targetProtein, targetFat, targetCarbs) {\n    _defineProperty(this, \"POPULATION_SIZE\", 100);\n    _defineProperty(this, \"SURVIVAL_RATE\", 0.3);\n    _defineProperty(this, \"MAX_ITERATIONS\", 10);\n    this.allFoods = allFoods.map(food => ({\n      ...food\n    }));\n    this.calculationMethod = calculationMethod;\n    this.targetProtein = Math.max(targetProtein, 0);\n    this.targetFat = Math.max(targetFat, 0);\n    this.targetCarbs = Math.max(targetCarbs, 0);\n  }\n  get targetCalories() {\n    return this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n  }\n  get meals() {\n    return [\"b\", \"s\", \"l\", \"d\"];\n  }\n  get foodsPerMeal() {\n    if (this._foodsPerMeal) {\n      return this._foodsPerMeal;\n    }\n    const foodsPerMeal = [];\n    for (const meal of this.meals) {\n      foodsPerMeal.push(this.allFoods.filter(food => food[meal]));\n    }\n    this._foodsPerMeal = foodsPerMeal;\n    return foodsPerMeal;\n  }\n  setTargets(protein, fat, carbs) {\n    this.targetProtein = protein;\n    this.targetFat = fat;\n    this.targetCarbs = carbs;\n  }\n  calculateError(plan) {\n    const total = {\n      protein: 0,\n      fat: 0,\n      carbs: 0\n    };\n    for (const meal of plan) {\n      for (const food of meal) {\n        total.protein += food.protein * (food.amount || 0);\n        total.fat += food.fat * (food.amount || 0);\n        total.carbs += food.carbs * (food.amount || 0);\n      }\n    }\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n  sortPlans(plans) {\n    return plans.sort((a, b) => this.calculateError(a) - this.calculateError(b));\n  }\n  createRandomMeal(mealIdx) {\n    const foodCounts = [1, 2, 3, 4, 5];\n    const foodCount = 1 + Math.floor(Math.random() * foodCounts.length);\n    const foods = getRandomSubsample(this.foodsPerMeal[mealIdx], foodCount);\n    return foods.map(food => ({\n      ...food,\n      amount: 1\n    }));\n  }\n  createRandomPopulation() {\n    const plans = [];\n    for (let i = 0; i < this.POPULATION_SIZE; i++) {\n      const plan = [];\n      for (let m = 0; m < this.meals.length; m++) {\n        plan.push(this.createRandomMeal(m));\n      }\n      plans.push(plan);\n    }\n    return plans;\n  }\n  extinctionAndEvolution(plans) {\n    plans = this.sortPlans(plans);\n\n    // Extinction: remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.ceil(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Evolution: randomly mutate some meals\n    const newPlans = [];\n    newPlans.push(...plans);\n    while (newPlans.length < this.POPULATION_SIZE) {\n      const planIdx = Math.floor(Math.random() * plans.length);\n      const mealIdx = Math.floor(Math.random() * this.meals.length);\n      const newPlan = plans[planIdx].map(m => [...m]);\n      newPlan[mealIdx] = this.createRandomMeal(mealIdx);\n      newPlans.push(newPlan);\n    }\n    return newPlans;\n  }\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n      plans = this.extinctionAndEvolution(plans);\n    }\n    plans = this.sortPlans(plans);\n    return plans[0];\n  }\n  calculateDays(days) {\n    const plans = [];\n    for (let i = 0; i < days; i++) {\n      plans.push(this.calculateDay());\n    }\n    return plans;\n  }\n}\n\n/*\n * Helper function\n */\n\nfunction getRandomSubsample(list, sampleSize) {\n  if (sampleSize <= 0) {\n    return [];\n  }\n  if (sampleSize > list.length) {\n    sampleSize = list.length;\n  }\n  const shuffledList = [...list];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n  return shuffledList.slice(0, sampleSize);\n}","map":{"version":3,"names":["CalculationMethods","all","protein","fat","carbs","calories","Calculator","constructor","allFoods","calculationMethod","targetProtein","targetFat","targetCarbs","_defineProperty","map","food","Math","max","targetCalories","meals","foodsPerMeal","_foodsPerMeal","meal","push","filter","setTargets","calculateError","plan","total","amount","e1","e2","e3","sortPlans","plans","sort","a","b","createRandomMeal","mealIdx","foodCounts","foodCount","floor","random","length","foods","getRandomSubsample","createRandomPopulation","i","POPULATION_SIZE","m","extinctionAndEvolution","survivalRate","survivorsCount","ceil","slice","newPlans","planIdx","newPlan","calculateDay","MAX_ITERATIONS","calculateDays","days","list","sampleSize","shuffledList","j"],"sources":["/home/x/workspace/01-diet-draft/client/src/calculator.js"],"sourcesContent":["/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\",\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  POPULATION_SIZE = 100;\n  SURVIVAL_RATE = 0.3;\n  MAX_ITERATIONS = 10;\n\n  constructor(\n    allFoods,\n    calculationMethod,\n    targetProtein,\n    targetFat,\n    targetCarbs\n  ) {\n    this.allFoods = allFoods.map((food) => ({ ...food }));\n    this.calculationMethod = calculationMethod;\n    this.targetProtein = Math.max(targetProtein, 0);\n    this.targetFat = Math.max(targetFat, 0);\n    this.targetCarbs = Math.max(targetCarbs, 0);\n  }\n\n  get targetCalories() {\n    return this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n  }\n\n  get meals() {\n    return [\"b\", \"s\", \"l\", \"d\"];\n  }\n\n  get foodsPerMeal() {\n    if (this._foodsPerMeal) {\n      return this._foodsPerMeal;\n    }\n\n    const foodsPerMeal = [];\n    for (const meal of this.meals) {\n      foodsPerMeal.push(this.allFoods.filter((food) => food[meal]));\n    }\n    this._foodsPerMeal = foodsPerMeal;\n    return foodsPerMeal;\n  }\n\n  setTargets(protein, fat, carbs) {\n    this.targetProtein = protein;\n    this.targetFat = fat;\n    this.targetCarbs = carbs;\n  }\n\n  calculateError(plan) {\n    const total = { protein: 0, fat: 0, carbs: 0 };\n    for (const meal of plan) {\n      for (const food of meal) {\n        total.protein += food.protein * (food.amount || 0);\n        total.fat += food.fat * (food.amount || 0);\n        total.carbs += food.carbs * (food.amount || 0);\n      }\n    }\n\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n\n  sortPlans(plans) {\n    return plans.sort(\n      (a, b) => this.calculateError(a) - this.calculateError(b)\n    );\n  }\n\n  createRandomMeal(mealIdx) {\n    const foodCounts = [1, 2, 3, 4, 5];\n    const foodCount = 1 + Math.floor(Math.random() * foodCounts.length);\n    const foods = getRandomSubsample(this.foodsPerMeal[mealIdx], foodCount);\n    return foods.map((food) => ({ ...food, amount: 1 }));\n  }\n\n  createRandomPopulation() {\n    const plans = [];\n    for (let i = 0; i < this.POPULATION_SIZE; i++) {\n      const plan = [];\n      for (let m = 0; m < this.meals.length; m++) {\n        plan.push(this.createRandomMeal(m));\n      }\n      plans.push(plan);\n    }\n    return plans;\n  }\n\n  extinctionAndEvolution(plans) {\n    plans = this.sortPlans(plans);\n\n    // Extinction: remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.ceil(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Evolution: randomly mutate some meals\n    const newPlans = [];\n    newPlans.push(...plans);\n    while (newPlans.length < this.POPULATION_SIZE) {\n      const planIdx = Math.floor(Math.random() * plans.length);\n      const mealIdx = Math.floor(Math.random() * this.meals.length);\n      const newPlan = plans[planIdx].map((m) => [...m]);\n      newPlan[mealIdx] = this.createRandomMeal(mealIdx);\n      newPlans.push(newPlan);\n    }\n\n    return newPlans;\n  }\n\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n      plans = this.extinctionAndEvolution(plans);\n    }\n    plans = this.sortPlans(plans);\n    return plans[0];\n  }\n\n  calculateDays(days) {\n    const plans = [];\n    for (let i = 0; i < days; i++) {\n      plans.push(this.calculateDay());\n    }\n    return plans;\n  }\n}\n\n/*\n * Helper function\n */\n\nfunction getRandomSubsample(list, sampleSize) {\n  if (sampleSize <= 0) {\n    return [];\n  }\n  if (sampleSize > list.length) {\n    sampleSize = list.length;\n  }\n\n  const shuffledList = [...list];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n\n  return shuffledList.slice(0, sampleSize);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}