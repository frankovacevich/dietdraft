{"ast":null,"code":"import _defineProperty from \"/home/x/workspace/01-diet-draft/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { defineStore } from \"pinia\";\nimport { Calculator } from \"./calculator\";\n\n/*\nClasses\n*/\nexport class Food {\n  constructor() {\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"icon\", void 0);\n    _defineProperty(this, \"description\", void 0);\n    _defineProperty(this, \"protein\", void 0);\n    _defineProperty(this, \"fat\", void 0);\n    _defineProperty(this, \"carbs\", void 0);\n    _defineProperty(this, \"amount\", void 0);\n    _defineProperty(this, \"meal\", void 0);\n    _defineProperty(this, \"category\", void 0);\n    _defineProperty(this, \"selected\", void 0);\n    _defineProperty(this, \"mealPresece\", void 0);\n  }\n}\nexport class PlanInfo {\n  constructor() {\n    _defineProperty(this, \"created\", new Date());\n    _defineProperty(this, \"protein\", 110);\n    _defineProperty(this, \"fat\", 105);\n    _defineProperty(this, \"carbs\", 100);\n    _defineProperty(this, \"days\", 1);\n    _defineProperty(this, \"calculationMethod\", CalculationMethods.all);\n  }\n  get calories() {\n    return this.protein * 4 + this.fat * 9 + this.carbs * 4;\n  }\n  get currentDay() {\n    return null;\n  }\n  get displayValues() {\n    return {\n      protein: this.protein.toFixed(),\n      fat: this.fat.toFixed(),\n      carbs: this.carbs.toFixed(),\n      calories: this.calories.toFixed()\n    };\n  }\n  get displayPercentages() {\n    return {\n      protein: (100 * this.protein * 4 / this.calories).toFixed(),\n      fat: (100 * this.fat * 9 / this.calories).toFixed(),\n      carbs: (100 * this.carbs * 4 / this.calories).toFixed(),\n      calories: 100\n    };\n  }\n  toJson() {\n    return JSON.stringify({\n      created: this.created,\n      protein: this.protein,\n      fat: this.fat,\n      carbs: this.carbs,\n      days: this.days,\n      calculationMethod: this.calculationMethod\n    });\n  }\n  static fromJson(json) {\n    const obj = JSON.parse(json);\n    const planInfo = new PlanInfo();\n    planInfo.created = obj.created;\n    planInfo.protein = obj.protein;\n    planInfo.fat = obj.fat;\n    planInfo.carbs = obj.carbs;\n    planInfo.days = obj.days;\n    planInfo.calculationMethod = obj.calculationMethod;\n    return planInfo;\n  }\n}\nexport class AddFoodModal {\n  constructor() {\n    _defineProperty(this, \"visible\", false);\n    _defineProperty(this, \"meal\", 0);\n    _defineProperty(this, \"foods\", []);\n  }\n  get foodCategores() {\n    return new Set(this.foods.map(food => food.category));\n  }\n  get mealName() {\n    return Meals[this.meal];\n  }\n  getSelectedFoods() {\n    const foods = this.foods.filter(food => food.selected);\n    foods.forEach(food => {\n      food.selected = false;\n      food.amount = 1;\n    });\n    return foods;\n  }\n  getFoodsByCategory(category) {\n    return this.foods.filter(food => food.category === category);\n  }\n  open(meal, foods) {\n    this.meal = meal;\n    this.visible = true;\n    this.foods = foods.map(food => ({\n      ...food\n    }));\n  }\n  close() {\n    this.visible = false;\n    return this.getSelectedFoods();\n  }\n}\nexport const Meals = [\"breakfast\", \"snack\", \"lunch\", \"dinner\"];\nconst CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\"\n};\nconst defaultPlanInfo = {\n  protein: 110,\n  fat: 105,\n  carbs: 100,\n  days: 1,\n  calculationMethod: CalculationMethods.all\n};\n\n/*\nStore\n*/\nexport const mainStore = defineStore(\"mainStore\", {\n  state: () => {\n    return {\n      allFoods: [],\n      planFoods: [],\n      planInfo: new PlanInfo(),\n      day: 0,\n      editMode: false,\n      selectedQuantity: 0,\n      //\n      addFoodModal: new AddFoodModal()\n      //\n    };\n  },\n  getters: {\n    meals() {\n      return Meals;\n    },\n    todaysFoods() {\n      return this.planFoods[this.day];\n    },\n    todayIsFirstDay() {\n      return this.day === 0;\n    },\n    todayIsLastDay() {\n      return this.day === this.planInfo.days - 1;\n    },\n    todaysQuantities() {\n      const total = {\n        protein: 0,\n        fat: 0,\n        carbs: 0\n      };\n      for (const meal of this.todaysFoods) {\n        for (const food of meal) {\n          total.protein += food.protein * (food.amount || 0);\n          total.fat += food.fat * (food.amount || 0);\n          total.carbs += food.carbs * (food.amount || 0);\n        }\n      }\n      return total;\n    },\n    allPlanAverages() {\n      const total = {\n        protein: 0,\n        fat: 0,\n        carbs: 0,\n        calories: 0\n      };\n      for (let day = 0; day < this.planFoods.length; day++) {\n        for (const meal of this.planFoods[day]) {\n          for (const food of meal) {\n            total.protein += food.protein * (food.amount || 0);\n            total.fat += food.fat * (food.amount || 0);\n            total.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n      total.calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      for (const item of total) {\n        total[item] = total[item].toFixed();\n      }\n      return total;\n    },\n    planInfoCalories() {\n      return this.planInfo.protein * 4 + this.planInfo.fat * 9 + this.planInfo.carbs * 4;\n    },\n    allFoodsCategories() {\n      const categories = new Set(this.allFoods.map(food => food.category));\n      return Array.from(categories);\n    }\n  },\n  actions: {\n    save() {\n      localStorage.setItem(\"planFoods\", JSON.stringify(this.planFoods));\n      if (this.planInfo !== null) {\n        localStorage.setItem(\"planInfo\", this.planInfo.toJson());\n      }\n    },\n    load() {\n      const obj = localStorage.getItem(\"planInfo\");\n      if (obj) {\n        this.planInfo = PlanInfo.fromJson(obj);\n      } else {\n        this.planInfo = new PlanInfo();\n      }\n      const planFoods = localStorage.getItem(\"planFoods\");\n      if (planFoods) {\n        this.planFoods = JSON.parse(planFoods);\n        if (planFoods.length === this.planInfo.days) {\n          this.planFoods = undefined;\n        }\n      }\n      if (!planFoods) {\n        this.planFoods = [[]];\n        for (let i = 0; i < this.planInfo.days; i++) {\n          for (let m = 0; m < this.meals.length; m++) {\n            this.planFoods[0].push([]);\n          }\n        }\n      }\n    },\n    async fetchData() {\n      const response = await fetch(\"/data.json\");\n      this.allFoods = await response.json();\n      this.allFoods.forEach(food => {\n        food.selected = false;\n      });\n    },\n    goToPreviousDay() {\n      if (!this.todayIsFirstDay) {\n        this.day--;\n      }\n    },\n    goToNextDay() {\n      if (!this.todayIsLastDay) {\n        this.day++;\n      }\n    },\n    toggleEditMode() {\n      this.editMode = !this.editMode;\n    },\n    newPlan() {},\n    recalculateToday() {\n      // Calculate targets based on what's already been eaten\n      const totalEaten = {\n        protein: 0,\n        fat: 0,\n        carbs: 0\n      };\n      for (const meal of this.todaysFoods) {\n        for (const food of meal) {\n          if (food.selected) {\n            totalEaten.protein += food.protein * (food.amount || 0);\n            totalEaten.fat += food.fat * (food.amount || 0);\n            totalEaten.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n      const calculator = new Calculator(this.allFoods, this.planInfo.calculationMethod, this.planInfo.protein - totalEaten.protein, this.planInfo.fat - totalEaten.fat, this.planInfo.carbs - totalEaten.carbs);\n      const newPlan = calculator.calculateDay();\n      for (let m = 0; m < newPlan.length; m++) {\n        const eatenFoods = this.todaysFoods[m].filter(food => food.selected);\n        newPlan[m] = [...eatenFoods, ...newPlan[m]];\n      }\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n    clearToday() {\n      const newPlan = [];\n      for (const meal of this.planFoods[this.day]) {\n        newPlan.push(meal.filter(food => food.selected));\n      }\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n    changeFoodEaten(food) {\n      food.selected = !food.selected;\n      this.save();\n    },\n    changeFoodAmount(food) {\n      const nextAmountMap = {\n        0.25: 0.5,\n        0.5: 0.75,\n        0.75: 1,\n        1: 1.25,\n        1.25: 1.5,\n        1.5: 0.25\n      };\n      food.amount = nextAmountMap[food.amount] || 1;\n    },\n    foodDragStart() {},\n    foodDragEnd() {\n      this.save();\n    },\n    removeFood(meal, index) {\n      this.planFoods[this.day][meal].splice(index, 1);\n    },\n    addFoodFromModal() {\n      if (!this.addFoodModal.visible) {\n        return;\n      }\n      const meal = this.addFoodModal.meal;\n      const foods = this.addFoodModal.close();\n      this.planFoods[this.day][meal].push(...foods);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","Calculator","Food","constructor","_defineProperty","PlanInfo","Date","CalculationMethods","all","calories","protein","fat","carbs","currentDay","displayValues","toFixed","displayPercentages","toJson","JSON","stringify","created","days","calculationMethod","fromJson","json","obj","parse","planInfo","AddFoodModal","foodCategores","Set","foods","map","food","category","mealName","Meals","meal","getSelectedFoods","filter","selected","forEach","amount","getFoodsByCategory","open","visible","close","defaultPlanInfo","mainStore","state","allFoods","planFoods","day","editMode","selectedQuantity","addFoodModal","getters","meals","todaysFoods","todayIsFirstDay","todayIsLastDay","todaysQuantities","total","allPlanAverages","length","item","planInfoCalories","allFoodsCategories","categories","Array","from","actions","save","localStorage","setItem","load","getItem","undefined","i","m","push","fetchData","response","fetch","goToPreviousDay","goToNextDay","toggleEditMode","newPlan","recalculateToday","totalEaten","calculator","calculateDay","eatenFoods","clearToday","changeFoodEaten","changeFoodAmount","nextAmountMap","foodDragStart","foodDragEnd","removeFood","index","splice","addFoodFromModal"],"sources":["/home/x/workspace/01-diet-draft/client/src/store.js"],"sourcesContent":["import { defineStore } from \"pinia\";\nimport { Calculator } from \"./calculator\";\n\n/*\nClasses\n*/\nexport class Food {\n  id;\n  name;\n  icon;\n  description;\n  protein;\n  fat;\n  carbs;\n  amount;\n  meal;\n  category;\n  selected;\n  mealPresece;\n}\n\nexport class PlanInfo {\n  created = new Date();\n  protein = 110;\n  fat = 105;\n  carbs = 100;\n  days = 1;\n  calculationMethod = CalculationMethods.all;\n\n  get calories() {\n    return this.protein * 4 + this.fat * 9 + this.carbs * 4;\n  }\n\n  get currentDay() {\n    return null;\n  }\n\n  get displayValues() {\n    return {\n      protein: this.protein.toFixed(),\n      fat: this.fat.toFixed(),\n      carbs: this.carbs.toFixed(),\n      calories: this.calories.toFixed(),\n    };\n  }\n\n  get displayPercentages() {\n    return {\n      protein: ((100 * this.protein * 4) / this.calories).toFixed(),\n      fat: ((100 * this.fat * 9) / this.calories).toFixed(),\n      carbs: ((100 * this.carbs * 4) / this.calories).toFixed(),\n      calories: 100,\n    };\n  }\n\n  toJson() {\n    return JSON.stringify({\n      created: this.created,\n      protein: this.protein,\n      fat: this.fat,\n      carbs: this.carbs,\n      days: this.days,\n      calculationMethod: this.calculationMethod,\n    });\n  }\n\n  static fromJson(json) {\n    const obj = JSON.parse(json);\n    const planInfo = new PlanInfo();\n    planInfo.created = obj.created;\n    planInfo.protein = obj.protein;\n    planInfo.fat = obj.fat;\n    planInfo.carbs = obj.carbs;\n    planInfo.days = obj.days;\n    planInfo.calculationMethod = obj.calculationMethod;\n    return planInfo;\n  }\n}\n\nexport class AddFoodModal {\n  visible = false;\n  meal = 0;\n  foods = [];\n\n  get foodCategores() {\n    return new Set(this.foods.map((food) => food.category));\n  }\n\n  get mealName() {\n    return Meals[this.meal];\n  }\n\n  getSelectedFoods() {\n    const foods = this.foods.filter((food) => food.selected);\n    foods.forEach((food) => {\n      food.selected = false;\n      food.amount = 1;\n    });\n    return foods;\n  }\n\n  getFoodsByCategory(category) {\n    return this.foods.filter((food) => food.category === category);\n  }\n\n  open(meal, foods) {\n    this.meal = meal;\n    this.visible = true;\n    this.foods = foods.map((food) => ({ ...food }));\n  }\n\n  close() {\n    this.visible = false;\n    return this.getSelectedFoods();\n  }\n}\n\nexport const Meals = [\"breakfast\", \"snack\", \"lunch\", \"dinner\"];\n\nconst CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n};\n\nconst defaultPlanInfo = {\n  protein: 110,\n  fat: 105,\n  carbs: 100,\n  days: 1,\n  calculationMethod: CalculationMethods.all,\n};\n\n/*\nStore\n*/\nexport const mainStore = defineStore(\"mainStore\", {\n  state: () => {\n    return {\n      allFoods: [],\n      planFoods: [],\n      planInfo: new PlanInfo(),\n      day: 0,\n      editMode: false,\n      selectedQuantity: 0,\n      //\n      addFoodModal: new AddFoodModal(),\n      //\n    };\n  },\n\n  getters: {\n    meals() {\n      return Meals;\n    },\n\n    todaysFoods() {\n      return this.planFoods[this.day];\n    },\n\n    todayIsFirstDay() {\n      return this.day === 0;\n    },\n\n    todayIsLastDay() {\n      return this.day === this.planInfo.days - 1;\n    },\n\n    todaysQuantities() {\n      const total = { protein: 0, fat: 0, carbs: 0 };\n      for (const meal of this.todaysFoods) {\n        for (const food of meal) {\n          total.protein += food.protein * (food.amount || 0);\n          total.fat += food.fat * (food.amount || 0);\n          total.carbs += food.carbs * (food.amount || 0);\n        }\n      }\n      return total;\n    },\n\n    allPlanAverages() {\n      const total = { protein: 0, fat: 0, carbs: 0, calories: 0 };\n      for (let day = 0; day < this.planFoods.length; day++) {\n        for (const meal of this.planFoods[day]) {\n          for (const food of meal) {\n            total.protein += food.protein * (food.amount || 0);\n            total.fat += food.fat * (food.amount || 0);\n            total.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n\n      total.calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      for (const item of total) {\n        total[item] = total[item].toFixed();\n      }\n      return total;\n    },\n\n    planInfoCalories() {\n      return (\n        this.planInfo.protein * 4 +\n        this.planInfo.fat * 9 +\n        this.planInfo.carbs * 4\n      );\n    },\n\n    allFoodsCategories() {\n      const categories = new Set(this.allFoods.map((food) => food.category));\n      return Array.from(categories);\n    },\n  },\n\n  actions: {\n    save() {\n      localStorage.setItem(\"planFoods\", JSON.stringify(this.planFoods));\n\n      if (this.planInfo !== null) {\n        localStorage.setItem(\"planInfo\", this.planInfo.toJson());\n      }\n    },\n\n    load() {\n      const obj = localStorage.getItem(\"planInfo\");\n      if (obj) {\n        this.planInfo = PlanInfo.fromJson(obj);\n      } else {\n        this.planInfo = new PlanInfo();\n      }\n\n      const planFoods = localStorage.getItem(\"planFoods\");\n      if (planFoods) {\n        this.planFoods = JSON.parse(planFoods);\n        if (planFoods.length === this.planInfo.days) {\n          this.planFoods = undefined;\n        }\n      }\n\n      if (!planFoods) {\n        this.planFoods = [[]];\n        for (let i = 0; i < this.planInfo.days; i++) {\n          for (let m = 0; m < this.meals.length; m++) {\n            this.planFoods[0].push([]);\n          }\n        }\n      }\n    },\n\n    async fetchData() {\n      const response = await fetch(\"/data.json\");\n      this.allFoods = await response.json();\n      this.allFoods.forEach((food) => {\n        food.selected = false;\n      });\n    },\n\n    goToPreviousDay() {\n      if (!this.todayIsFirstDay) {\n        this.day--;\n      }\n    },\n\n    goToNextDay() {\n      if (!this.todayIsLastDay) {\n        this.day++;\n      }\n    },\n\n    toggleEditMode() {\n      this.editMode = !this.editMode;\n    },\n\n    newPlan() {},\n\n    recalculateToday() {\n      // Calculate targets based on what's already been eaten\n      const totalEaten = { protein: 0, fat: 0, carbs: 0 };\n      for (const meal of this.todaysFoods) {\n        for (const food of meal) {\n          if (food.selected) {\n            totalEaten.protein += food.protein * (food.amount || 0);\n            totalEaten.fat += food.fat * (food.amount || 0);\n            totalEaten.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n\n      const calculator = new Calculator(\n        this.allFoods,\n        this.planInfo.calculationMethod,\n        this.planInfo.protein - totalEaten.protein,\n        this.planInfo.fat - totalEaten.fat,\n        this.planInfo.carbs - totalEaten.carbs\n      );\n\n      const newPlan = calculator.calculateDay();\n      for (let m = 0; m < newPlan.length; m++) {\n        const eatenFoods = this.todaysFoods[m].filter((food) => food.selected);\n        newPlan[m] = [...eatenFoods, ...newPlan[m]];\n      }\n\n      this.planFoods[this.day] = newPlan;\n\n      this.save();\n    },\n\n    clearToday() {\n      const newPlan = [];\n      for (const meal of this.planFoods[this.day]) {\n        newPlan.push(meal.filter((food) => food.selected));\n      }\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n\n    changeFoodEaten(food) {\n      food.selected = !food.selected;\n      this.save();\n    },\n\n    changeFoodAmount(food) {\n      const nextAmountMap = {\n        0.25: 0.5,\n        0.5: 0.75,\n        0.75: 1,\n        1: 1.25,\n        1.25: 1.5,\n        1.5: 0.25,\n      };\n      food.amount = nextAmountMap[food.amount] || 1;\n    },\n\n    foodDragStart() {},\n\n    foodDragEnd() {\n      this.save();\n    },\n\n    removeFood(meal, index) {\n      this.planFoods[this.day][meal].splice(index, 1);\n    },\n\n    addFoodFromModal() {\n      if (!this.addFoodModal.visible) {\n        return;\n      }\n      const meal = this.addFoodModal.meal;\n      const foods = this.addFoodModal.close();\n      this.planFoods[this.day][meal].push(...foods);\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}