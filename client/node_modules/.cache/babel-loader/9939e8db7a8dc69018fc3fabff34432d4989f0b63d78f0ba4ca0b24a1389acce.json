{"ast":null,"code":"import _defineProperty from \"/home/x/workspace/01-diet-draft/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\"\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  constructor() {\n    _defineProperty(this, \"allFoods\", void 0);\n    _defineProperty(this, \"targetProtein\", void 0);\n    _defineProperty(this, \"targetFat\", void 0);\n    _defineProperty(this, \"targetCarbs\", void 0);\n    _defineProperty(this, \"calculationMethod\", void 0);\n    _defineProperty(this, \"calculationError\", void 0);\n  }\n  getErrorFunction() {}\n  calculateError(plan) {\n    const total = {\n      protein: 0,\n      fat: 0,\n      carbs: 0\n    };\n    for (const food of plan.flat()) {\n      total.protein += food.protein * (food.amount || 0);\n      total.fat += food.fat * (food.amount || 0);\n      total.carbs += food.carbs * (food.amount || 0);\n    }\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      const tCalories = this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n  createRandomPopulation() {\n    // Get foods per meal\n    const foodsPerMeal = [];\n    const meals = [\"b\", \"s\", \"l\", \"d\"];\n    for (const meal of meals) {\n      foodsPerMeal.push(this.allFoods.filter(food => food[meal]));\n    }\n\n    // Build random plans\n    const plans = [];\n    const foodCounts = [1, 2, 3, 4, 5];\n    for (let i = 0; i < this.STARTING_POPULATION; i++) {\n      const plan = [];\n      for (let m = 0; m < meals.length; m++) {\n        const foodCount = Math.floor(Math.random() * foodCounts.length);\n        const foods = getRandomSubsample(foodsPerMeal[m], foodCount);\n        plan.push(foods.map(food => ({\n          ...food\n        })));\n      }\n      plans.push(plan);\n    }\n    return plans;\n  }\n  extinsionAndCrossover(plans) {\n    // Order plans by error\n    plans = plans.sort((a, b) => this.calculateError(b) - this.calculateError(a));\n\n    // Remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.floor(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Crossover\n    const newPlans = [];\n    newPlans.push(...plans);\n    return newPlans;\n  }\n  calc() {\n    // 1. Create a random population\n    //\n    // 2. Cross breed\n  }\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n      plans = this.extinsionAndCrossover(plans);\n    }\n    return plans;\n  }\n  calculateDays(days) {\n    console.log(days);\n  }\n}\n\n/*\n * Helper function\n */\n//\n_defineProperty(Calculator, \"STARTING_POPULATION\", 100);\n_defineProperty(Calculator, \"SURVIVAL_RATE\", 0.1);\n_defineProperty(Calculator, \"MAX_ITERATIONS\", 10);\nfunction getRandomSubsample(originalList, sampleSize) {\n  if (sampleSize <= 0 || sampleSize > originalList.length) {\n    console.error(\"Invalid sample size\");\n    return [];\n  }\n\n  // Shuffle the original list using Fisher-Yates algorithm\n  const shuffledList = [...originalList];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n\n  // Take the first 'sampleSize' elements from the shuffled list\n  const subsampledList = shuffledList.slice(0, sampleSize);\n  return subsampledList;\n}","map":{"version":3,"names":["CalculationMethods","all","protein","fat","carbs","calories","Calculator","constructor","_defineProperty","getErrorFunction","calculateError","plan","total","food","flat","amount","calculationMethod","e1","targetProtein","e2","targetFat","e3","targetCarbs","tCalories","targetCalories","createRandomPopulation","foodsPerMeal","meals","meal","push","allFoods","filter","plans","foodCounts","i","STARTING_POPULATION","m","length","foodCount","Math","floor","random","foods","getRandomSubsample","map","extinsionAndCrossover","sort","a","b","survivalRate","survivorsCount","slice","newPlans","calc","calculateDay","MAX_ITERATIONS","calculateDays","days","console","log","originalList","sampleSize","error","shuffledList","j","subsampledList"],"sources":["/home/x/workspace/01-diet-draft/client/src/calculator.js"],"sourcesContent":["/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\",\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  allFoods;\n  targetProtein;\n  targetFat;\n  targetCarbs;\n  calculationMethod;\n  calculationError;\n\n  //\n  static STARTING_POPULATION = 100;\n  static SURVIVAL_RATE = 0.1;\n  static MAX_ITERATIONS = 10;\n\n  constructor() {}\n\n  getErrorFunction() {}\n\n  calculateError(plan) {\n    const total = { protein: 0, fat: 0, carbs: 0 };\n    for (const food of plan.flat()) {\n      total.protein += food.protein * (food.amount || 0);\n      total.fat += food.fat * (food.amount || 0);\n      total.carbs += food.carbs * (food.amount || 0);\n    }\n\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      const tCalories =\n        this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n\n  createRandomPopulation() {\n    // Get foods per meal\n    const foodsPerMeal = [];\n    const meals = [\"b\", \"s\", \"l\", \"d\"];\n    for (const meal of meals) {\n      foodsPerMeal.push(this.allFoods.filter((food) => food[meal]));\n    }\n\n    // Build random plans\n    const plans = [];\n    const foodCounts = [1, 2, 3, 4, 5];\n    for (let i = 0; i < this.STARTING_POPULATION; i++) {\n      const plan = [];\n      for (let m = 0; m < meals.length; m++) {\n        const foodCount = Math.floor(Math.random() * foodCounts.length);\n        const foods = getRandomSubsample(foodsPerMeal[m], foodCount);\n        plan.push(foods.map((food) => ({ ...food })));\n      }\n      plans.push(plan);\n    }\n\n    return plans;\n  }\n\n  extinsionAndCrossover(plans) {\n    // Order plans by error\n    plans = plans.sort(\n      (a, b) => this.calculateError(b) - this.calculateError(a)\n    );\n\n    // Remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.floor(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Crossover\n    const newPlans = [];\n    newPlans.push(...plans);\n\n    return newPlans;\n  }\n\n  calc() {\n    // 1. Create a random population\n    //\n    // 2. Cross breed\n  }\n\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n      plans = this.extinsionAndCrossover(plans);\n    }\n    return plans;\n  }\n\n  calculateDays(days) {\n    console.log(days);\n  }\n}\n\n/*\n * Helper function\n */\n\nfunction getRandomSubsample(originalList, sampleSize) {\n  if (sampleSize <= 0 || sampleSize > originalList.length) {\n    console.error(\"Invalid sample size\");\n    return [];\n  }\n\n  // Shuffle the original list using Fisher-Yates algorithm\n  const shuffledList = [...originalList];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n\n  // Take the first 'sampleSize' elements from the shuffled list\n  const subsampledList = shuffledList.slice(0, sampleSize);\n\n  return subsampledList;\n}\n"],"mappings":";;AAAA;AACA;AACA;;AAEA,OAAO,MAAMA,kBAAkB,GAAG;EAChCC,GAAG,EAAE,KAAK;EACVC,OAAO,EAAE,SAAS;EAClBC,GAAG,EAAE,KAAK;EACVC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,CAAC;EAatBC,WAAWA,CAAA,EAAG;IAAAC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;EAAC;EAEfC,gBAAgBA,CAAA,EAAG,CAAC;EAEpBC,cAAcA,CAACC,IAAI,EAAE;IACnB,MAAMC,KAAK,GAAG;MAAEV,OAAO,EAAE,CAAC;MAAEC,GAAG,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC;IAC9C,KAAK,MAAMS,IAAI,IAAIF,IAAI,CAACG,IAAI,CAAC,CAAC,EAAE;MAC9BF,KAAK,CAACV,OAAO,IAAIW,IAAI,CAACX,OAAO,IAAIW,IAAI,CAACE,MAAM,IAAI,CAAC,CAAC;MAClDH,KAAK,CAACT,GAAG,IAAIU,IAAI,CAACV,GAAG,IAAIU,IAAI,CAACE,MAAM,IAAI,CAAC,CAAC;MAC1CH,KAAK,CAACR,KAAK,IAAIS,IAAI,CAACT,KAAK,IAAIS,IAAI,CAACE,MAAM,IAAI,CAAC,CAAC;IAChD;IAEA,IAAI,IAAI,CAACC,iBAAiB,KAAKhB,kBAAkB,CAACC,GAAG,EAAE;MACrD,MAAMgB,EAAE,GAAGL,KAAK,CAACV,OAAO,GAAG,IAAI,CAACgB,aAAa;MAC7C,MAAMC,EAAE,GAAGP,KAAK,CAACT,GAAG,GAAG,IAAI,CAACiB,SAAS;MACrC,MAAMC,EAAE,GAAGT,KAAK,CAACR,KAAK,GAAG,IAAI,CAACkB,WAAW;MACzC,OAAOL,EAAE,IAAI,CAAC,GAAGE,EAAE,IAAI,CAAC,GAAGE,EAAE,IAAI,CAAC;IACpC,CAAC,MAAM,IAAI,IAAI,CAACL,iBAAiB,KAAKhB,kBAAkB,CAACE,OAAO,EAAE;MAChE,OAAO,CAACU,KAAK,CAACV,OAAO,GAAG,IAAI,CAACgB,aAAa,KAAK,CAAC;IAClD,CAAC,MAAM,IAAI,IAAI,CAACF,iBAAiB,KAAKhB,kBAAkB,CAACG,GAAG,EAAE;MAC5D,OAAO,CAACS,KAAK,CAACT,GAAG,GAAG,IAAI,CAACiB,SAAS,KAAK,CAAC;IAC1C,CAAC,MAAM,IAAI,IAAI,CAACJ,iBAAiB,KAAKhB,kBAAkB,CAACI,KAAK,EAAE;MAC9D,OAAO,CAACQ,KAAK,CAACR,KAAK,GAAG,IAAI,CAACkB,WAAW,KAAK,CAAC;IAC9C,CAAC,MAAM,IAAI,IAAI,CAACN,iBAAiB,KAAKhB,kBAAkB,CAACK,QAAQ,EAAE;MACjE,MAAMA,QAAQ,GAAGO,KAAK,CAACV,OAAO,GAAG,CAAC,GAAGU,KAAK,CAACT,GAAG,GAAG,CAAC,GAAGS,KAAK,CAACR,KAAK,GAAG,CAAC;MACpE,MAAMmB,SAAS,GACb,IAAI,CAACL,aAAa,GAAG,CAAC,GAAG,IAAI,CAACI,WAAW,GAAG,CAAC,GAAG,IAAI,CAACF,SAAS,GAAG,CAAC;MACpE,OAAO,CAACf,QAAQ,GAAG,IAAI,CAACmB,cAAc,KAAK,CAAC;IAC9C;EACF;EAEAC,sBAAsBA,CAAA,EAAG;IACvB;IACA,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAClC,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;MACxBD,YAAY,CAACG,IAAI,CAAC,IAAI,CAACC,QAAQ,CAACC,MAAM,CAAElB,IAAI,IAAKA,IAAI,CAACe,IAAI,CAAC,CAAC,CAAC;IAC/D;;IAEA;IACA,MAAMI,KAAK,GAAG,EAAE;IAChB,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,mBAAmB,EAAED,CAAC,EAAE,EAAE;MACjD,MAAMvB,IAAI,GAAG,EAAE;MACf,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;QACrC,MAAME,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,UAAU,CAACI,MAAM,CAAC;QAC/D,MAAMK,KAAK,GAAGC,kBAAkB,CAACjB,YAAY,CAACU,CAAC,CAAC,EAAEE,SAAS,CAAC;QAC5D3B,IAAI,CAACkB,IAAI,CAACa,KAAK,CAACE,GAAG,CAAE/B,IAAI,KAAM;UAAE,GAAGA;QAAK,CAAC,CAAC,CAAC,CAAC;MAC/C;MACAmB,KAAK,CAACH,IAAI,CAAClB,IAAI,CAAC;IAClB;IAEA,OAAOqB,KAAK;EACd;EAEAa,qBAAqBA,CAACb,KAAK,EAAE;IAC3B;IACAA,KAAK,GAAGA,KAAK,CAACc,IAAI,CAChB,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAI,CAACtC,cAAc,CAACsC,CAAC,CAAC,GAAG,IAAI,CAACtC,cAAc,CAACqC,CAAC,CAC1D,CAAC;;IAED;IACA,MAAME,YAAY,GAAG,GAAG;IACxB,MAAMC,cAAc,GAAGX,IAAI,CAACC,KAAK,CAACS,YAAY,GAAGjB,KAAK,CAACK,MAAM,CAAC;IAC9DL,KAAK,GAAGA,KAAK,CAACmB,KAAK,CAAC,CAAC,EAAED,cAAc,CAAC;;IAEtC;IACA,MAAME,QAAQ,GAAG,EAAE;IACnBA,QAAQ,CAACvB,IAAI,CAAC,GAAGG,KAAK,CAAC;IAEvB,OAAOoB,QAAQ;EACjB;EAEAC,IAAIA,CAAA,EAAG;IACL;IACA;IACA;EAAA;EAGFC,YAAYA,CAAA,EAAG;IACb,IAAItB,KAAK,GAAG,IAAI,CAACP,sBAAsB,CAAC,CAAC;IACzC,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACqB,cAAc,EAAErB,CAAC,EAAE,EAAE;MAC5CF,KAAK,GAAG,IAAI,CAACa,qBAAqB,CAACb,KAAK,CAAC;IAC3C;IACA,OAAOA,KAAK;EACd;EAEAwB,aAAaA,CAACC,IAAI,EAAE;IAClBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACnB;AACF;;AAEA;AACA;AACA;AAnGE;AAAAjD,eAAA,CARWF,UAAU,yBASQ,GAAG;AAAAE,eAAA,CATrBF,UAAU,mBAUE,GAAG;AAAAE,eAAA,CAVfF,UAAU,oBAWG,EAAE;AAkG5B,SAASqC,kBAAkBA,CAACiB,YAAY,EAAEC,UAAU,EAAE;EACpD,IAAIA,UAAU,IAAI,CAAC,IAAIA,UAAU,GAAGD,YAAY,CAACvB,MAAM,EAAE;IACvDqB,OAAO,CAACI,KAAK,CAAC,qBAAqB,CAAC;IACpC,OAAO,EAAE;EACX;;EAEA;EACA,MAAMC,YAAY,GAAG,CAAC,GAAGH,YAAY,CAAC;EACtC,KAAK,IAAI1B,CAAC,GAAG6B,YAAY,CAAC1B,MAAM,GAAG,CAAC,EAAEH,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAChD,MAAM8B,CAAC,GAAGzB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIP,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAAC6B,YAAY,CAAC7B,CAAC,CAAC,EAAE6B,YAAY,CAACC,CAAC,CAAC,CAAC,GAAG,CAACD,YAAY,CAACC,CAAC,CAAC,EAAED,YAAY,CAAC7B,CAAC,CAAC,CAAC;EACzE;;EAEA;EACA,MAAM+B,cAAc,GAAGF,YAAY,CAACZ,KAAK,CAAC,CAAC,EAAEU,UAAU,CAAC;EAExD,OAAOI,cAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}