{"ast":null,"code":"import _defineProperty from \"/home/x/workspace/01-diet-draft/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { defineStore } from \"pinia\";\nimport { Calculator } from \"./calculator\";\n\n/*\nClasses\n*/\nexport class Food {\n  constructor() {\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"icon\", void 0);\n    _defineProperty(this, \"description\", void 0);\n    _defineProperty(this, \"protein\", void 0);\n    _defineProperty(this, \"fat\", void 0);\n    _defineProperty(this, \"carbs\", void 0);\n    _defineProperty(this, \"amount\", void 0);\n    _defineProperty(this, \"meal\", void 0);\n    _defineProperty(this, \"category\", void 0);\n    _defineProperty(this, \"selected\", void 0);\n    _defineProperty(this, \"mealPresece\", void 0);\n  }\n}\nexport class PlanInfo {\n  constructor() {\n    _defineProperty(this, \"created\", void 0);\n    _defineProperty(this, \"protein\", void 0);\n    _defineProperty(this, \"fat\", void 0);\n    _defineProperty(this, \"carbs\", void 0);\n    _defineProperty(this, \"days\", void 0);\n    _defineProperty(this, \"calculationMethod\", void 0);\n    _defineProperty(this, \"calculationError\", void 0);\n  }\n}\nexport class AddFoodModal {\n  constructor() {\n    _defineProperty(this, \"visible\", false);\n    _defineProperty(this, \"meal\", 0);\n    _defineProperty(this, \"foods\", []);\n  }\n  get foodCategores() {\n    return new Set(this.foods.map(food => food.category));\n  }\n  get mealName() {\n    return Meals[this.meal];\n  }\n  getSelectedFoods() {\n    const foods = this.foods.filter(food => food.selected);\n    foods.forEach(food => {\n      food.selected = false;\n      food.amount = 1;\n    });\n    return foods;\n  }\n  getFoodsByCategory(category) {\n    return this.foods.filter(food => food.category === category);\n  }\n  open(meal, foods) {\n    this.meal = meal;\n    this.visible = true;\n    this.foods = foods.map(food => ({\n      ...food\n    }));\n  }\n  close() {\n    this.visible = false;\n    return this.getSelectedFoods();\n  }\n}\nexport const Meals = [\"breakfast\", \"snack\", \"lunch\", \"dinner\"];\nconst CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\"\n};\nconst defaultPlanInfo = {\n  protein: 110,\n  fat: 105,\n  carbs: 100,\n  days: 1,\n  calculationMethod: CalculationMethods.all\n};\n\n/*\nStore\n*/\nexport const mainStore = defineStore(\"mainStore\", {\n  state: () => {\n    return {\n      allFoods: [],\n      planFoods: [],\n      planInfo: null,\n      day: 0,\n      editMode: false,\n      selectedQuantity: 0,\n      //\n      addFoodModal: new AddFoodModal()\n      //\n    };\n  },\n  getters: {\n    meals() {\n      return Meals;\n    },\n    todaysFoods() {\n      return this.planFoods[this.day];\n    },\n    todayIsFirstDay() {\n      return this.day === 0;\n    },\n    todayIsLastDay() {\n      return this.day === this.planInfo.days - 1;\n    },\n    todaysQuantities() {\n      const total = {\n        protein: 0,\n        fat: 0,\n        carbs: 0\n      };\n      for (const meal of this.todaysFoods) {\n        for (const food of meal) {\n          total.protein += food.protein * (food.amount || 0);\n          total.fat += food.fat * (food.amount || 0);\n          total.carbs += food.carbs * (food.amount || 0);\n        }\n      }\n      return total;\n    },\n    allPlanQuantities() {\n      const total = {\n        protein: 0,\n        fat: 0,\n        carbs: 0\n      };\n      for (let day = 0; day < this.planFoods.length; day++) {\n        for (const meal of this.planFoods[day]) {\n          for (const food of meal) {\n            total.protein += food.protein * (food.amount || 0);\n            total.fat += food.fat * (food.amount || 0);\n            total.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n      return total;\n    },\n    allFoodsCategories() {\n      const categories = new Set(this.allFoods.map(food => food.category));\n      return Array.from(categories);\n    }\n  },\n  actions: {\n    save() {\n      localStorage.setItem(\"planFoods\", JSON.stringify(this.planFoods));\n      if (this.planInfo !== null) {\n        localStorage.setItem(\"planInfo\", JSON.stringify(this.planInfo));\n      }\n    },\n    load() {\n      const planInfo = localStorage.getItem(\"planInfo\");\n      if (planInfo) {\n        this.planInfo = JSON.parse(planInfo);\n      } else {\n        this.planInfo = {\n          ...defaultPlanInfo,\n          created: new Date().getTime()\n        };\n      }\n      const planFoods = localStorage.getItem(\"planFoods\");\n      if (planFoods) {\n        this.planFoods = JSON.parse(planFoods);\n        if (planFoods.length === this.planInfo.days) {\n          this.planFoods = undefined;\n        }\n      }\n      if (!planFoods) {\n        this.planFoods = [];\n        for (let i = 0; i < this.planInfo.days; i++) {\n          this.planFoods.push([]);\n          this.planFoods.push([]);\n          this.planFoods.push([]);\n          this.planFoods.push([]);\n        }\n      }\n    },\n    async fetchData() {\n      const response = await fetch(\"/data.json\");\n      this.allFoods = await response.json();\n      this.allFoods.forEach(food => {\n        food.selected = false;\n      });\n    },\n    goToPreviousDay() {\n      if (!this.todayIsFirstDay) {\n        this.day--;\n      }\n    },\n    goToNextDay() {\n      if (!this.todayIsLastDay) {\n        this.day++;\n      }\n    },\n    toggleEditMode() {\n      this.editMode = !this.editMode;\n    },\n    newPlan() {},\n    recalculateToday() {\n      alert(\"Recalculating!\");\n      // Calculate targets based on what's already been eaten\n      const totalEaten = {\n        protein: 0,\n        fat: 0,\n        carbs: 0\n      };\n      for (const meal of this.todaysFoods) {\n        for (const food of meal) {\n          if (food.selected) {\n            totalEaten.protein += food.protein * (food.amount || 0);\n            totalEaten.fat += food.fat * (food.amount || 0);\n            totalEaten.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n      alert(`A! ${totalEaten}`);\n      const calculator = new Calculator(this.allFoods, this.planInfo.calculationMethod, this.planInfo.protein - totalEaten.protein, this.planInfo.fat - totalEaten.fat, this.planInfo.carbs - totalEaten.carbs);\n      alert(`B! ${totalEaten.protein}`);\n      const newPlan = calculator.calculateDay();\n      alert(`C!`);\n      for (let m = 0; m < newPlan.length; m++) {\n        alert(`D! ${m}`);\n        alert(`E! x${this.todaysFoods}x x${this.todaysFoods === undefined}x x${this.todaysFoods === null}x`);\n        alert(`E2! ${this.todaysFoods[m].filter(food => food.selected)}`);\n        const eatenFoods = this.todaysFoods[m].filter(food => food.selected);\n        alert(`F! ${newPlan[m]}`);\n        newPlan[m] = [...eatenFoods, ...newPlan[m]];\n      }\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n    clearToday() {\n      const newPlan = [];\n      for (const meal of this.planFoods[this.day]) {\n        newPlan.push(meal.filter(food => food.selected));\n      }\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n    changeFoodEaten(food) {\n      food.selected = !food.selected;\n      this.save();\n    },\n    changeFoodAmount(food) {\n      const nextAmountMap = {\n        0.25: 0.5,\n        0.5: 0.75,\n        0.75: 1,\n        1: 1.25,\n        1.25: 1.5,\n        1.5: 0.25\n      };\n      food.amount = nextAmountMap[food.amount] || 1;\n    },\n    foodDragStart() {},\n    foodDragEnd() {\n      this.save();\n    },\n    removeFood(meal, index) {\n      this.planFoods[this.day][meal].splice(index, 1);\n    },\n    addFoodFromModal() {\n      if (!this.addFoodModal.visible) {\n        return;\n      }\n      const meal = this.addFoodModal.meal;\n      const foods = this.addFoodModal.close();\n      alert(JSON.stringify(foods));\n      alert(this.day);\n      alert(`planFoods x${JSON.stringify(this.planFoods)}x x${typeof this.planFoods}x`);\n      alert(this.planFoods[this.day]);\n      this.planFoods[this.day][meal].push(...foods);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","Calculator","Food","constructor","_defineProperty","PlanInfo","AddFoodModal","foodCategores","Set","foods","map","food","category","mealName","Meals","meal","getSelectedFoods","filter","selected","forEach","amount","getFoodsByCategory","open","visible","close","CalculationMethods","all","protein","fat","carbs","defaultPlanInfo","days","calculationMethod","mainStore","state","allFoods","planFoods","planInfo","day","editMode","selectedQuantity","addFoodModal","getters","meals","todaysFoods","todayIsFirstDay","todayIsLastDay","todaysQuantities","total","allPlanQuantities","length","allFoodsCategories","categories","Array","from","actions","save","localStorage","setItem","JSON","stringify","load","getItem","parse","created","Date","getTime","undefined","i","push","fetchData","response","fetch","json","goToPreviousDay","goToNextDay","toggleEditMode","newPlan","recalculateToday","alert","totalEaten","calculator","calculateDay","m","eatenFoods","clearToday","changeFoodEaten","changeFoodAmount","nextAmountMap","foodDragStart","foodDragEnd","removeFood","index","splice","addFoodFromModal"],"sources":["/home/x/workspace/01-diet-draft/client/src/store.js"],"sourcesContent":["import { defineStore } from \"pinia\";\nimport { Calculator } from \"./calculator\";\n\n/*\nClasses\n*/\nexport class Food {\n  id;\n  name;\n  icon;\n  description;\n  protein;\n  fat;\n  carbs;\n  amount;\n  meal;\n  category;\n  selected;\n  mealPresece;\n}\n\nexport class PlanInfo {\n  created;\n  protein;\n  fat;\n  carbs;\n  days;\n  calculationMethod;\n  calculationError;\n}\n\nexport class AddFoodModal {\n  visible = false;\n  meal = 0;\n  foods = [];\n\n  get foodCategores() {\n    return new Set(this.foods.map((food) => food.category));\n  }\n\n  get mealName() {\n    return Meals[this.meal];\n  }\n\n  getSelectedFoods() {\n    const foods = this.foods.filter((food) => food.selected);\n    foods.forEach((food) => {\n      food.selected = false;\n      food.amount = 1;\n    });\n    return foods;\n  }\n\n  getFoodsByCategory(category) {\n    return this.foods.filter((food) => food.category === category);\n  }\n\n  open(meal, foods) {\n    this.meal = meal;\n    this.visible = true;\n    this.foods = foods.map((food) => ({ ...food }));\n  }\n\n  close() {\n    this.visible = false;\n    return this.getSelectedFoods();\n  }\n}\n\nexport const Meals = [\"breakfast\", \"snack\", \"lunch\", \"dinner\"];\n\nconst CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n};\n\nconst defaultPlanInfo = {\n  protein: 110,\n  fat: 105,\n  carbs: 100,\n  days: 1,\n  calculationMethod: CalculationMethods.all,\n};\n\n/*\nStore\n*/\nexport const mainStore = defineStore(\"mainStore\", {\n  state: () => {\n    return {\n      allFoods: [],\n      planFoods: [],\n      planInfo: null,\n      day: 0,\n      editMode: false,\n      selectedQuantity: 0,\n      //\n      addFoodModal: new AddFoodModal(),\n      //\n    };\n  },\n\n  getters: {\n    meals() {\n      return Meals;\n    },\n\n    todaysFoods() {\n      return this.planFoods[this.day];\n    },\n\n    todayIsFirstDay() {\n      return this.day === 0;\n    },\n\n    todayIsLastDay() {\n      return this.day === this.planInfo.days - 1;\n    },\n\n    todaysQuantities() {\n      const total = { protein: 0, fat: 0, carbs: 0 };\n      for (const meal of this.todaysFoods) {\n        for (const food of meal) {\n          total.protein += food.protein * (food.amount || 0);\n          total.fat += food.fat * (food.amount || 0);\n          total.carbs += food.carbs * (food.amount || 0);\n        }\n      }\n      return total;\n    },\n\n    allPlanQuantities() {\n      const total = { protein: 0, fat: 0, carbs: 0 };\n      for (let day = 0; day < this.planFoods.length; day++) {\n        for (const meal of this.planFoods[day]) {\n          for (const food of meal) {\n            total.protein += food.protein * (food.amount || 0);\n            total.fat += food.fat * (food.amount || 0);\n            total.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n      return total;\n    },\n\n    allFoodsCategories() {\n      const categories = new Set(this.allFoods.map((food) => food.category));\n      return Array.from(categories);\n    },\n  },\n\n  actions: {\n    save() {\n      localStorage.setItem(\"planFoods\", JSON.stringify(this.planFoods));\n\n      if (this.planInfo !== null) {\n        localStorage.setItem(\"planInfo\", JSON.stringify(this.planInfo));\n      }\n    },\n\n    load() {\n      const planInfo = localStorage.getItem(\"planInfo\");\n      if (planInfo) {\n        this.planInfo = JSON.parse(planInfo);\n      } else {\n        this.planInfo = { ...defaultPlanInfo, created: new Date().getTime() };\n      }\n\n      const planFoods = localStorage.getItem(\"planFoods\");\n      if (planFoods) {\n        this.planFoods = JSON.parse(planFoods);\n        if (planFoods.length === this.planInfo.days) {\n          this.planFoods = undefined;\n        }\n      }\n\n      if (!planFoods) {\n        this.planFoods = [];\n        for (let i = 0; i < this.planInfo.days; i++) {\n          this.planFoods.push([]);\n          this.planFoods.push([]);\n          this.planFoods.push([]);\n          this.planFoods.push([]);\n        }\n      }\n    },\n\n    async fetchData() {\n      const response = await fetch(\"/data.json\");\n      this.allFoods = await response.json();\n      this.allFoods.forEach((food) => {\n        food.selected = false;\n      });\n    },\n\n    goToPreviousDay() {\n      if (!this.todayIsFirstDay) {\n        this.day--;\n      }\n    },\n\n    goToNextDay() {\n      if (!this.todayIsLastDay) {\n        this.day++;\n      }\n    },\n\n    toggleEditMode() {\n      this.editMode = !this.editMode;\n    },\n\n    newPlan() {},\n\n    recalculateToday() {\n      alert(\"Recalculating!\");\n      // Calculate targets based on what's already been eaten\n      const totalEaten = { protein: 0, fat: 0, carbs: 0 };\n      for (const meal of this.todaysFoods) {\n        for (const food of meal) {\n          if (food.selected) {\n            totalEaten.protein += food.protein * (food.amount || 0);\n            totalEaten.fat += food.fat * (food.amount || 0);\n            totalEaten.carbs += food.carbs * (food.amount || 0);\n          }\n        }\n      }\n      alert(`A! ${totalEaten}`);\n\n      const calculator = new Calculator(\n        this.allFoods,\n        this.planInfo.calculationMethod,\n        this.planInfo.protein - totalEaten.protein,\n        this.planInfo.fat - totalEaten.fat,\n        this.planInfo.carbs - totalEaten.carbs\n      );\n\n      alert(`B! ${totalEaten.protein}`);\n\n      const newPlan = calculator.calculateDay();\n      alert(`C!`);\n      for (let m = 0; m < newPlan.length; m++) {\n        alert(`D! ${m}`);\n        alert(\n          `E! x${this.todaysFoods}x x${this.todaysFoods === undefined}x x${\n            this.todaysFoods === null\n          }x`\n        );\n        alert(`E2! ${this.todaysFoods[m].filter((food) => food.selected)}`);\n        const eatenFoods = this.todaysFoods[m].filter((food) => food.selected);\n        alert(`F! ${newPlan[m]}`);\n        newPlan[m] = [...eatenFoods, ...newPlan[m]];\n      }\n\n      this.planFoods[this.day] = newPlan;\n\n      this.save();\n    },\n\n    clearToday() {\n      const newPlan = [];\n      for (const meal of this.planFoods[this.day]) {\n        newPlan.push(meal.filter((food) => food.selected));\n      }\n      this.planFoods[this.day] = newPlan;\n      this.save();\n    },\n\n    changeFoodEaten(food) {\n      food.selected = !food.selected;\n      this.save();\n    },\n\n    changeFoodAmount(food) {\n      const nextAmountMap = {\n        0.25: 0.5,\n        0.5: 0.75,\n        0.75: 1,\n        1: 1.25,\n        1.25: 1.5,\n        1.5: 0.25,\n      };\n      food.amount = nextAmountMap[food.amount] || 1;\n    },\n\n    foodDragStart() {},\n\n    foodDragEnd() {\n      this.save();\n    },\n\n    removeFood(meal, index) {\n      this.planFoods[this.day][meal].splice(index, 1);\n    },\n\n    addFoodFromModal() {\n      if (!this.addFoodModal.visible) {\n        return;\n      }\n      const meal = this.addFoodModal.meal;\n      const foods = this.addFoodModal.close();\n      alert(JSON.stringify(foods));\n      alert(this.day);\n      alert(\n        `planFoods x${JSON.stringify(this.planFoods)}x x${typeof this\n          .planFoods}x`\n      );\n      alert(this.planFoods[this.day]);\n      this.planFoods[this.day][meal].push(...foods);\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}