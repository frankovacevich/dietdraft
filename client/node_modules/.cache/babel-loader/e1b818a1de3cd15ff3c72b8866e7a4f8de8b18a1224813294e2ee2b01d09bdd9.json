{"ast":null,"code":"import _defineProperty from \"/home/x/workspace/01-diet-draft/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\"\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  constructor() {\n    _defineProperty(this, \"allFoods\", void 0);\n    _defineProperty(this, \"targetProtein\", void 0);\n    _defineProperty(this, \"targetFat\", void 0);\n    _defineProperty(this, \"targetCarbs\", void 0);\n    _defineProperty(this, \"calculationMethod\", void 0);\n    _defineProperty(this, \"calculationError\", void 0);\n    //\n    _defineProperty(this, \"POPULATION_SIZE\", 100);\n    _defineProperty(this, \"SURVIVAL_RATE\", 0.1);\n    _defineProperty(this, \"MAX_ITERATIONS\", 10);\n  }\n  get targetCalories() {\n    return this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n  }\n  get meals() {\n    return [\"b\", \"s\", \"l\", \"d\"];\n  }\n  get foodsPerMeal() {\n    if (this.foodsPerMeal) {\n      return this.foodsPerMeal;\n    }\n    const foodsPerMeal = [];\n    for (const meal of this.meals) {\n      foodsPerMeal.push(this.allFoods.filter(food => food[meal]));\n    }\n    this.foodsPerMeal = foodsPerMeal;\n    return foodsPerMeal;\n  }\n  calculateError(plan) {\n    const total = {\n      protein: 0,\n      fat: 0,\n      carbs: 0\n    };\n    for (const food of plan.flat()) {\n      total.protein += food.protein * (food.amount || 0);\n      total.fat += food.fat * (food.amount || 0);\n      total.carbs += food.carbs * (food.amount || 0);\n    }\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n  createRandomMeal(mealIdx) {\n    const foodCounts = [1, 2, 3, 4, 5];\n    const foodCount = 1 + Math.floor(Math.random() * foodCounts.length);\n    return getRandomSubsample(this.foodsPerMeal[mealIdx], foodCount);\n  }\n  createRandomPopulation() {\n    const plans = [];\n    for (let i = 0; i < this.POPULATION_SIZE; i++) {\n      const plan = [];\n      for (let m = 0; m < this.meals.length; m++) {\n        plan.push(this.createRandomMeal(m).map(food => ({\n          ...food\n        })));\n      }\n      plans.push(plan);\n    }\n    return plans;\n  }\n  extinctionAndEvolution(plans) {\n    // Order plans by error\n    plans = plans.sort((a, b) => this.calculateError(b) - this.calculateError(a));\n\n    // Extinction: remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.ceil(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Evolution: randomly mutate some meals\n    const newPlans = [];\n    newPlans.push(...plans);\n    while (newPlans.length < this.POPULATION_SIZE) {\n      const planIdx = Math.floor(Math.random() * plans.length);\n      const mealIdx = Math.floor(Math.random() * this.meals.length);\n      const newPlan = plans[planIdx].map(food => ({\n        ...food\n      }));\n    }\n    return newPlans;\n  }\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n      plans = this.extinctionAndEvolution(plans);\n    }\n    return plans;\n  }\n  calculateDays(days) {\n    console.log(days);\n  }\n}\n\n/*\n * Helper function\n */\n\nfunction getRandomSubsample(originalList, sampleSize) {\n  if (sampleSize <= 0 || sampleSize > originalList.length) {\n    console.error(\"Invalid sample size\");\n    return [];\n  }\n\n  // Shuffle the original list using Fisher-Yates algorithm\n  const shuffledList = [...originalList];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n\n  // Take the first 'sampleSize' elements from the shuffled list\n  const subsampledList = shuffledList.slice(0, sampleSize);\n  return subsampledList;\n}","map":{"version":3,"names":["CalculationMethods","all","protein","fat","carbs","calories","Calculator","constructor","_defineProperty","targetCalories","targetProtein","targetCarbs","targetFat","meals","foodsPerMeal","meal","push","allFoods","filter","food","calculateError","plan","total","flat","amount","calculationMethod","e1","e2","e3","createRandomMeal","mealIdx","foodCounts","foodCount","Math","floor","random","length","getRandomSubsample","createRandomPopulation","plans","i","POPULATION_SIZE","m","map","extinctionAndEvolution","sort","a","b","survivalRate","survivorsCount","ceil","slice","newPlans","planIdx","newPlan","calculateDay","MAX_ITERATIONS","calculateDays","days","console","log","originalList","sampleSize","error","shuffledList","j","subsampledList"],"sources":["/home/x/workspace/01-diet-draft/client/src/calculator.js"],"sourcesContent":["/*\n * Helper classes and enums\n */\n\nexport const CalculationMethods = {\n  all: \"ALL\",\n  protein: \"PROTEIN\",\n  fat: \"FAT\",\n  carbs: \"CARBS\",\n  calories: \"CALORIES\",\n};\n\n/*\n * Calculator class\n */\n\nexport class Calculator {\n  allFoods;\n  targetProtein;\n  targetFat;\n  targetCarbs;\n  calculationMethod;\n  calculationError;\n\n  //\n  POPULATION_SIZE = 100;\n  SURVIVAL_RATE = 0.1;\n  MAX_ITERATIONS = 10;\n\n  constructor() {}\n\n  get targetCalories() {\n    return this.targetProtein * 4 + this.targetCarbs * 4 + this.targetFat * 9;\n  }\n\n  get meals() {\n    return [\"b\", \"s\", \"l\", \"d\"];\n  }\n\n  get foodsPerMeal() {\n    if (this.foodsPerMeal) {\n      return this.foodsPerMeal;\n    }\n\n    const foodsPerMeal = [];\n    for (const meal of this.meals) {\n      foodsPerMeal.push(this.allFoods.filter((food) => food[meal]));\n    }\n    this.foodsPerMeal = foodsPerMeal;\n    return foodsPerMeal;\n  }\n\n  calculateError(plan) {\n    const total = { protein: 0, fat: 0, carbs: 0 };\n    for (const food of plan.flat()) {\n      total.protein += food.protein * (food.amount || 0);\n      total.fat += food.fat * (food.amount || 0);\n      total.carbs += food.carbs * (food.amount || 0);\n    }\n\n    if (this.calculationMethod === CalculationMethods.all) {\n      const e1 = total.protein - this.targetProtein;\n      const e2 = total.fat - this.targetFat;\n      const e3 = total.carbs - this.targetCarbs;\n      return e1 ** 2 + e2 ** 2 + e3 ** 2;\n    } else if (this.calculationMethod === CalculationMethods.protein) {\n      return (total.protein - this.targetProtein) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.fat) {\n      return (total.fat - this.targetFat) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.carbs) {\n      return (total.carbs - this.targetCarbs) ** 2;\n    } else if (this.calculationMethod === CalculationMethods.calories) {\n      const calories = total.protein * 4 + total.fat * 9 + total.carbs * 4;\n      return (calories - this.targetCalories) ** 2;\n    }\n  }\n\n  createRandomMeal(mealIdx) {\n    const foodCounts = [1, 2, 3, 4, 5];\n    const foodCount = 1 + Math.floor(Math.random() * foodCounts.length);\n    return getRandomSubsample(this.foodsPerMeal[mealIdx], foodCount);\n  }\n\n  createRandomPopulation() {\n    const plans = [];\n    for (let i = 0; i < this.POPULATION_SIZE; i++) {\n      const plan = [];\n      for (let m = 0; m < this.meals.length; m++) {\n        plan.push(this.createRandomMeal(m).map((food) => ({ ...food })));\n      }\n      plans.push(plan);\n    }\n    return plans;\n  }\n\n  extinctionAndEvolution(plans) {\n    // Order plans by error\n    plans = plans.sort(\n      (a, b) => this.calculateError(b) - this.calculateError(a)\n    );\n\n    // Extinction: remove the ones with high error\n    const survivalRate = 0.1;\n    const survivorsCount = Math.ceil(survivalRate * plans.length);\n    plans = plans.slice(0, survivorsCount);\n\n    // Evolution: randomly mutate some meals\n    const newPlans = [];\n    newPlans.push(...plans);\n    while (newPlans.length < this.POPULATION_SIZE) {\n      const planIdx = Math.floor(Math.random() * plans.length);\n      const mealIdx = Math.floor(Math.random() * this.meals.length);\n      const newPlan = plans[planIdx].map((food) => ({ ...food }));\n    }\n\n    return newPlans;\n  }\n\n  calculateDay() {\n    let plans = this.createRandomPopulation();\n    for (let i = 0; i < this.MAX_ITERATIONS; i++) {\n      plans = this.extinctionAndEvolution(plans);\n    }\n    return plans;\n  }\n\n  calculateDays(days) {\n    console.log(days);\n  }\n}\n\n/*\n * Helper function\n */\n\nfunction getRandomSubsample(originalList, sampleSize) {\n  if (sampleSize <= 0 || sampleSize > originalList.length) {\n    console.error(\"Invalid sample size\");\n    return [];\n  }\n\n  // Shuffle the original list using Fisher-Yates algorithm\n  const shuffledList = [...originalList];\n  for (let i = shuffledList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledList[i], shuffledList[j]] = [shuffledList[j], shuffledList[i]];\n  }\n\n  // Take the first 'sampleSize' elements from the shuffled list\n  const subsampledList = shuffledList.slice(0, sampleSize);\n\n  return subsampledList;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}